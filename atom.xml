<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nighting99</title>
  
  <subtitle>丛九九大人的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-20T16:30:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nighting99</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2018/03/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/19/正则表达式/</id>
    <published>2018-03-19T14:14:22.000Z</published>
    <updated>2018-03-20T16:30:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于正则，我知道的大概也就是 <code>*</code> 和 <code>[]</code> 之类最简单的匹配规则了。</p><p>每每需要用到的时候，就是查，但是如果自己遇到一段写好的正则，我可能不能分析出这个正则能匹配出什么，主要还是不够熟悉吧。</p><p>所以就重新认识一下正则表达式，尤其是前端用到的正则表达式</p><h2 id="基本形式"><a href="#基本形式" class="headerlink" title="基本形式"></a>基本形式</h2><p>一条正则由以下几种元素组合而成：</p><ul><li>普通字符，如 a-z/A-Z/0-9</li><li>非打印字符，如 \n \t 等</li><li>特殊字符，如 \ | 等</li><li>限定符，如 * + 等</li><li>定位符，如 ^ 和 $ 以及 \b 和 \B</li></ul><p>具体介绍如下</p><h3 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h3><p>指的是没有特殊含义的字符，比如 a-z A-Z 0-9 等</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/a/</span></span><br><span class="line">reg.exec(<span class="string">'abc'</span>) <span class="comment">// ["a", index: 0, input: "a", groups: undefined]</span></span><br><span class="line">reg.test(<span class="string">'bcd'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如上，能够找到第一个 <code>a</code></p><h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><p>指的是一般我们看不到的字符，如换行符制表符等</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/a\nb/</span></span><br><span class="line">reg.exec(<span class="string">`ssa</span></span><br><span class="line"><span class="string">bf`</span>) <span class="comment">// ["a↵b", index: 2, input: "ssa↵bf", groups: undefined]</span></span><br><span class="line">reg.test(<span class="string">'ssabf'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>特殊字符在正则里一般有特殊的作用，而所有的特殊字符都不能当做普通字符进行匹配</p><p>而如果我们需要匹配一些特殊字符，就可以用 <code>\</code> 来转义特殊字符，包括 <code>\</code> 本身也是特殊字符，如果需要匹配也需要转义</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/\./</span></span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="regexp">/./</span></span><br><span class="line"></span><br><span class="line">reg1.exec(<span class="string">'baidu.com'</span>) <span class="comment">// [".", index: 5, input: "baidu.com", groups: undefined]</span></span><br><span class="line">reg2.exec(<span class="string">'baidu.com'</span>) <span class="comment">// ["b", index: 0, input: "baidu.com", groups: undefined]</span></span><br></pre></td></tr></table></figure><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配</p><p>有 <code>*</code> 或 <code>+</code> 或 <code>?</code> 或 <code>{n}</code> 或 <code>{n,}</code> 或 <code>{n,m}</code> 共6种</p><ul><li><code>*</code> 0次或多次</li><li><code>+</code> 一次或多次</li><li><code>?</code> 0次或一次</li><li><code>{n}</code> 匹配 n 次</li><li><code>{n,}</code> 至少匹配 n 次</li><li><code>{n, m}</code> 匹配 (n, m] 次，即 n &lt; x &lt;= m</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/a&#123;3&#125;/</span></span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="regexp">/(ab)&#123;2,4&#125;/</span></span><br><span class="line"></span><br><span class="line">reg1.exec(<span class="string">'aabaaa'</span>) <span class="comment">// ["aaa", index: 3, input: "aabaaa", groups: undefined]</span></span><br><span class="line">reg2.exec(<span class="string">'aababaab'</span>) <span class="comment">// ["abab", "ab", index: 1, input: "aababaab", groups: undefined]</span></span><br></pre></td></tr></table></figure><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><p>四种</p><ul><li><code>^</code> 字符串开头</li><li><code>$</code> 字符串结尾</li><li><code>\b</code> 字符边界，字与空格间的位置</li><li><code>\B</code> 非字符边界</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/\babc\B/</span></span><br><span class="line"></span><br><span class="line">reg.exec(<span class="string">'abc abcd abc'</span>) <span class="comment">// ["abc", index: 4, input: "abc abcd abc", groups: undefined]</span></span><br></pre></td></tr></table></figure><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><p>默认的情况下，一个正则匹配到一个符合条件的字符串之后，就不会继续进行了，只需要输出这一个答案即可</p><p>但是相对的，就有不同的匹配模式，能够更改正则的匹配</p><ul><li><code>g</code> 全局，表示要找出字符串中所有的符合条件的匹配，而不是找到一个就停止了</li><li><code>i</code> 忽略大小写，字面意思</li><li><code>m</code> 多行匹配，更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/abc/ig</span></span><br><span class="line"></span><br><span class="line">reg.exec(<span class="string">`_abc ab </span></span><br><span class="line"><span class="string">abc aabbc aa ABc ABC f`</span>)</span><br></pre></td></tr></table></figure><h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><p>以上几种字符，进行匹配的时候，有两种匹配结果，占位匹配和不占位匹配</p><ul><li>占有字符 该匹配占有该字符，之后的匹配就不能再匹配这个字符了</li><li>零宽度 匹配到的是位置，则不占用该字符，之后的还可以继续匹配该字符</li></ul><p>很抽象的样子</p><p>比如下面的例子</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/ab(?=c)/.test(<span class="string">'ab'</span>) <span class="comment">// false</span></span><br><span class="line">/(?<span class="xml"><span class="tag">&lt;<span class="name">=a)bc</span>/<span class="attr">.test</span>('<span class="attr">abc</span>') // <span class="attr">true</span></span></span></span><br></pre></td></tr></table></figure><p>第一条进行匹配的时候，正则字符 <code>a</code> 占有了字符串里面的第一个字符 <code>a</code>, 匹配成功，匹配继续进行</p><p>因为 <code>a</code> 被正则的第一个匹配占有了，因此不能再匹配这个<code>a</code>，正则字符 <code>b</code> 匹配第二个字符 <code>b</code>，成功</p><p>同样占有，继续匹配第三个字符 <code>(?=c)</code>,这是一个零宽度的匹配，指的是匹配但不获取，需要有一个 <code>c</code>，但字符串后面无法匹配到，因此匹配失败</p><p>此时一次匹配失败，重新开始进行匹配，知道读到字符串结束，未能成功匹配，则匹配不成功</p><p>而类似的，有很多零宽度匹配，可以看作是一种条件吧，也说是匹配位置</p><h2 id="正则引擎"><a href="#正则引擎" class="headerlink" title="正则引擎"></a>正则引擎</h2><p>目前的正则引擎有 <code>DFA</code>、<code>NFA</code></p><p>两者比较明显的区别是， <code>DFA</code> 是没有回溯的，匹配过一遍的字符就不会再进行匹配了。而 <code>NFA</code> 引擎是有回溯匹配机制的</p><p>而 <code>DFA</code> 因为不需要回溯，所以匹配速度相对 <code>NFA</code> 快一些，而 <code>DFA</code> 不支持捕获组，所以也就不支持反向引用和 <code>$number</code> 这种引用方式</p><ul><li>DFA Deterministic finite automaton 确定型有穷自动机</li><li>NFA Non-deterministic finite automaton　非确定型有穷自动机</li></ul><p>而 NFA 分为两种</p><ul><li>Traditional NFA</li><li>POSIX NFA</li></ul><p>两者的区别在于，<code>POSIX NFA</code> 引擎，它的特点主要是提供 <code>longest-leftmost</code> 匹配，也就是在找到最左侧最长匹配之前，它将继续回溯</p><p>目前大部分正则实现都是使用的 <code>Traditional NFA</code> 引擎，它有一些 <code>DFA</code> 不支持的特性：</p><ul><li>捕获组、反向引用和 <code>$number</code> 引用方式</li><li>环视(Lookaround) <code>(?&lt;=…)、(?&lt;!…)、(?=…)、(?!…)</code>，或者叫做预搜索</li><li>忽略优化量词 <code>??、*?、+?、{m,n}?、{m,}?</code>，或者有的文章叫做非贪婪模式</li><li>占有优先量词 <code>?+、*+、++、{m,n}+、{m,}+</code> (目前仅Java和PCRE支持)，固化分组 <code>?&gt;…</code></li></ul><h3 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h3><p>在正则中，用 <code>()</code> 可以捕获组，捕获组有两种</p><ul><li>普通捕获组，如 <code>(a)</code></li><li>命名捕获组，如 <code>(?&lt;a&gt;a)</code>, 将能够得到名为 <code>a</code> 的组</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/(?<span class="xml"><span class="tag">&lt;<span class="name">year</span>&gt;</span>\d&#123;4&#125;)/.exec('year 2014') // groups: &#123; year: "2014" &#125;</span></span><br></pre></td></tr></table></figure><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p>捕获组捕获到的内容，不仅可以在正则表达式外部通过程序进行引用，也可以在正则表达式内部进行引用</p><p>普通捕获组反向引用 <code>\k&lt;number&gt;</code>，通常简写为 <code>\number</code></p><p>命名捕获组反向引用 <code>\k&lt;name&gt;</code> 或者 <code>\k&#39;name&#39;</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/([1-9]+)m:\1s/</span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-\k&lt;year&gt;/</span></span><br><span class="line">reg.exec(<span class="string">'32m:14m 11m:11s'</span>) <span class="comment">// ["11m:11s", "11", index: 8, input: "32m:14m 11m:11s", groups: undefined]</span></span><br><span class="line">reg1.exec(<span class="string">'2018-2018'</span>)</span><br></pre></td></tr></table></figure><p>实测 <code>\k&#39;name&#39;</code> 的方式在 <code>JavaScript</code> 里无法使用，会报 <code>Invalid named reference</code> 的错</p><h3 id="环视"><a href="#环视" class="headerlink" title="环视"></a>环视</h3><p>也叫做预匹配</p><ul><li><code>(?=)</code>，正向匹配，<code>a(?=b)</code> 可以匹配 <code>ab</code> 中的 <code>a</code>，但无法匹配 <code>ac</code> 中的 <code>a</code></li><li><code>(?!)</code>，正向否定匹配，<code>a(?!b)</code> 可以匹配 <code>ac</code> 中的 <code>a</code>，但无法匹配 <code>ab</code> 中的 <code>a</code></li><li><code>(?&lt;=)</code>，负向匹配，<code>(?&lt;=a)b</code> 可以匹配 <code>ab</code> 中的 <code>b</code>，但无法匹配 <code>cb</code> 中的 <code>b</code></li><li><code>(?&lt;!)</code>，负向匹配，<code>(?&lt;!a)b</code> 可以匹配 <code>cb</code> 中的 <code>b</code>，但无法匹配 <code>ab</code> 中的 <code>b</code></li></ul><h3 id="忽略优化量词-非贪婪"><a href="#忽略优化量词-非贪婪" class="headerlink" title="忽略优化量词(非贪婪)"></a>忽略优化量词(非贪婪)</h3><p>考虑如下匹配</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/a&#123;<span class="number">2</span>,<span class="number">5</span>&#125;/.exec(<span class="string">'aaaaaaa'</span>) <span class="comment">// aaaaa</span></span><br><span class="line">/a&#123;<span class="number">2</span>,<span class="number">5</span>&#125;+<span class="regexp">/.exec('aaaaaaa') /</span><span class="regexp">/ aa</span></span><br></pre></td></tr></table></figure><p>下面的就是非贪婪，意思是仅匹配最低限度符合的字符</p><h3 id="占有优先量词"><a href="#占有优先量词" class="headerlink" title="占有优先量词"></a>占有优先量词</h3><p><em>JS 引擎不支持貌似，所以实验不了</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于正则，我知道的大概也就是 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;[]&lt;/code&gt; 之类最简单的匹配规则了。&lt;/p&gt;&lt;p&gt;每每需要用到的时候，就是查，但是如果自己遇到一段写好的正则，我可能不能分析出这个正则能匹配出什么，主要还是不够熟悉吧。&lt;/p&gt;&lt;p&gt;所以就重
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS Grid Layout 从入门到入门</title>
    <link href="http://yoursite.com/2017/03/14/CSS-Grid-Layout-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/03/14/CSS-Grid-Layout-从入门到入门/</id>
    <published>2017-03-14T14:14:52.000Z</published>
    <updated>2018-03-19T13:24:18.542Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 的 Grid Layout 已经开始在浏览器上有资词啦！</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-14-142653.jpg" alt="caniuse"></p><p>可以看到在 FF 的52版本以上已经支持了，Chrome 从57开始支持，如果用 dev 版本或者 canary 版本都可以了，safari 包括10.1和 tp 版都已经支持了。</p><p>可以愉快的搞起来啦。</p><blockquote><p>友情提醒，如果想看到某些代码的效果，请在上文提到的支持 Grid 的浏览器中查看本文，移动端浏览器通通不支持。</p></blockquote><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>一个 Grid 其实就是由一系列相交的线组成的结构，其主要的概念如下</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-14-145049.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-14-145049.jpg"></p><ul><li><em>grid lines</em> 组成 grid 的线，垂直或者水平，并且从1开始计数</li><li><em>grid tracks</em> 在 grid 中的行和列，其中水平的为行(row)，竖直的为列(column)</li><li><em>grid cells</em> 行和列的交点</li><li><em>grid area</em> 由一系列相邻的 cells 组成的长方形区域</li></ul><h1 id="创建一个-Grid"><a href="#创建一个-Grid" class="headerlink" title="创建一个 Grid"></a>创建一个 Grid</h1><p>首先就是一个新的<code>display</code>值，叫做<code>grid</code>。</p><p>将某个元素的 display 设置为 grid 就可以创建一个 grid layout 了。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后写点 CSS</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以看到如下效果啦：</p><p data-height="400" data-theme-id="0" data-slug-hash="aJypqZ" data-default-tab="result" data-user="nighting" data-embed-version="2" data-pen-title="aJypqZ" class="codepen">See the Pen <a href="http://codepen.io/nighting/pen/aJypqZ/" target="_blank" rel="noopener">aJypqZ</a> by Yang Cong (<a href="http://codepen.io/nighting" target="_blank" rel="noopener">@nighting</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p><code>grid-template-columns</code> 属性，定义了 grid 的各个列的宽度</p><p><code>grid-template-rows</code> 属性，定义了grid 的各个行的高度</p><p>这样就可以画出一整个 grid 了</p><p>而 <code>grid-gap</code> 属性，定义了各个 grid cells 之间的距离</p><h1 id="自适应的-Grid"><a href="#自适应的-Grid" class="headerlink" title="自适应的 Grid"></a>自适应的 Grid</h1><p>如你发现，上面的定义只是创建了一个 grid，并没能自适应屏幕。</p><p>Grid 标准引入了一个新的单位，fr，我们可以使用 fr 单位来做自适应。</p><blockquote><p>1fr 是一个『分数单位』，用来表示『元素剩余的空间』 — <a href="https://social.msdn.microsoft.com/Forums/en-US/95fddeb2-04bc-4f2b-bfb6-ffecffe5e8d5/grid-layout-fr-measurement-what-does-it-mean?forum=winappswithhtml5" target="_blank" rel="noopener">MDN</a></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>  &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">200px</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2n)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: darkgrey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2n+1)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><p data-height="400" data-theme-id="0" data-slug-hash="ZeJerK" data-default-tab="result" data-user="nighting" data-embed-version="2" data-pen-title="ZeJerK" class="codepen">See the Pen <a href="http://codepen.io/nighting/pen/ZeJerK/" target="_blank" rel="noopener">ZeJerK</a> by Yang Cong (<a href="http://codepen.io/nighting" target="_blank" rel="noopener">@nighting</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><h2 id="minmax"><a href="#minmax" class="headerlink" title="minmax()"></a>minmax()</h2><p>我们可能不单单需要一个简单的长度，也不一定需要某个元素无限扩大或收缩。这时候就可以使用 minmax 函数，这个函数接收两个参数，分别是 min 和 max 的长度，比如</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-columns</span>: <span class="selector-tag">minmax</span>(300<span class="selector-tag">px</span>, 1<span class="selector-tag">fr</span>) <span class="selector-tag">minmax</span>(200<span class="selector-tag">px</span>, 400<span class="selector-tag">px</span>) 300<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>效果如下</p><p data-height="400" data-theme-id="0" data-slug-hash="bqrJpy" data-default-tab="result" data-user="nighting" data-embed-version="2" data-pen-title="bqrJpy" class="codepen">See the Pen <a href="http://codepen.io/nighting/pen/bqrJpy/" target="_blank" rel="noopener">bqrJpy</a> by Yang Cong (<a href="http://codepen.io/nighting" target="_blank" rel="noopener">@nighting</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><h2 id="使用-repeat"><a href="#使用-repeat" class="headerlink" title="使用 repeat()"></a>使用 repeat()</h2><p>你可能也发现了，如果我需要四列，那我需要写4个长度，如果需要100列……天呐，无法想象。机智的劳动人民怎么会允许这种事情的发生，于是随带着 Grid 一起的还有个CSS函数，repeat()</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">repeat(times:<span class="built_in">Number</span>, <span class="attr">length</span>:Length)</span><br></pre></td></tr></table></figure><p>如下</p><ul><li>repeat(4, 1pr) === 1pr 1pr 1pr 1pr</li><li>repeat(3, 100px) === 100px 100px 100px</li></ul><p>因此上面的 CSS 也可以改写成如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>  &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(4, 1fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(2, 200px);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果还是如上！</p><h2 id="auto-fit-amp-auto-fill"><a href="#auto-fit-amp-auto-fill" class="headerlink" title="auto-fit &amp; auto-fill"></a>auto-fit &amp; auto-fill</h2><p>有时候我们并不需要确定行数和列数，可能我们希望能根据浏览器的窗口大小来自动的适应。这时候我们就会用到 auto-fill 和 auto-fit 属性。两者的区别我也不是很清楚，貌似 auto-fill 会尽可能多得去增加行数和列数，而 auto-fit 则相反。</p><p>我们可以看到下面两张图的差别：</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-083027.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-083027.jpg"></p><p>以及</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-083113.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-083113.jpg"></p><p>从表现上看，auto-fit 不会产生空的行或者列。</p><p data-height="400" data-theme-id="0" data-slug-hash="gmxJma" data-default-tab="result" data-user="nighting" data-embed-version="2" data-pen-title="gmxJma" class="codepen">See the Pen <a href="http://codepen.io/nighting/pen/gmxJma/" target="_blank" rel="noopener">gmxJma</a> by Yang Cong (<a href="http://codepen.io/nighting" target="_blank" rel="noopener">@nighting</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><h1 id="template-areas"><a href="#template-areas" class="headerlink" title="template areas"></a>template areas</h1><p>Grid 还提供了一种用于排版的方法，也就是 template areas，手动得将想要的layout 设置，而且还是『可视化』的哦</p><p>具体代码如下</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是我们很常见的头部+导航+主要内容+底部的布局</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: hd;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff2e9c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#61dae4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: at;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#73d545</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: ft;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2ee3e</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">400px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"hd hd"</span></span><br><span class="line">    <span class="string">"sidebar at"</span></span><br><span class="line">    <span class="string">"sidebar ft"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最主要的代码就是 <code>grid-template-areas</code> 这个属性啦，里面的值生动得呈现了最终的效果。</p><p data-height="700" data-theme-id="0" data-slug-hash="yMobap" data-default-tab="result" data-user="nighting" data-embed-version="2" data-pen-title="yMobap" class="codepen">See the Pen <a href="http://codepen.io/nighting/pen/yMobap/" target="_blank" rel="noopener">yMobap</a> by Yang Cong (<a href="http://codepen.io/nighting" target="_blank" rel="noopener">@nighting</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><h1 id="定位和占位"><a href="#定位和占位" class="headerlink" title="定位和占位"></a>定位和占位</h1><p>有时候我们并不想按照特定的顺序来排列，也有某些部分想要更多的 cell</p><p>我们可以使用属性 <code>grid-column-start</code> 和 <code>grid-column-end</code> 以及对应的 <code>grid-row-start</code>和<code>grid-row-end</code> 来进行定位和占位</p><p>为了方便，我们可以使用缩写属性 <code>grid-column</code> 和 <code>grid-row</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(5, 100px);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(5, 100px);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#a</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff2e9c</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">3</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#b</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#61dae4</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">3</span> / <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span> / span <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的结果是酱的：</p><p data-height="800" data-theme-id="0" data-slug-hash="NpvjMa" data-default-tab="result" data-user="nighting" data-embed-version="2" data-pen-title="NpvjMa" class="codepen">See the Pen <a href="http://codepen.io/nighting/pen/NpvjMa/" target="_blank" rel="noopener">NpvjMa</a> by Yang Cong (<a href="http://codepen.io/nighting" target="_blank" rel="noopener">@nighting</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p>其中出现了一个 span 的值，表示跨度。</p><p>还记得开头出现的 <em>gird lines</em> 吗，是从1开始计数的，这里我们定位的值即是 <code>grid lines</code> 的标号。</p><p>比如 <code>grid-row: 2 / span 3</code> ，表示该元素纵向从第二根线开始，并且占据3个 cell。</p><h1 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h1><h2 id="align-content-和-justify-content"><a href="#align-content-和-justify-content" class="headerlink" title="align-content 和 justify-content"></a>align-content 和 justify-content</h2><p>justify-content 用于定义 grid 在水平方向 如何对齐</p><p>align-content 用于定义 grid 在垂直方向 如何对齐</p><p>他们有如下几个值</p><ul><li>start</li><li>center</li><li>end</li><li>space-between</li><li>space-around</li><li>space-evenly</li><li>stretch</li></ul><p>具体表现如下：</p><p>DOM结构</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">150px</span> <span class="number">150px</span> <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">650px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid grey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff2e9c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">gird-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#61dae4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">gird-column</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#73d545</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span><br><span class="line">  <span class="attribute">gird-column</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2ee3e</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>align-content: strat; justify-content: start;</code></li></ul><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-085419.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-085419.jpg"></p><ul><li><code>align-content: center; justify-content: center;</code></li></ul><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-085534.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-085534.jpg"></p><ul><li><code>align-content: end; justify-content: end;</code></li></ul><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-085625.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-085625.jpg"></p><ul><li><code>align-content: center; justify-content: space-evenly;</code></li></ul><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-085732.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-085732.jpg"></p><ul><li><code>align-content: space-around; justify-content: center;</code></li></ul><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-085825.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-085825.jpg"></p><ul><li><code>align-content: space-between; justify-content: center;</code></li></ul><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-090016.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-090016.jpg"></p><h2 id="justify-self-和-align-self"><a href="#justify-self-和-align-self" class="headerlink" title="justify-self 和 align-self"></a>justify-self 和 align-self</h2><p>justify-self 用于定义grid 内元素在水平方向的排列</p><p>align-self 用于定于 grid 内元素在垂直方向的排列</p><p>有如下几种值</p><ul><li>start</li><li>end</li><li>center</li><li>stretch 默认值</li></ul><p>使用和效果如下：</p><p data-height="550" data-theme-id="0" data-slug-hash="ZeJdvg" data-default-tab="result" data-user="nighting" data-embed-version="2" data-pen-title="ZeJdvg" class="codepen">See the Pen <a href="http://codepen.io/nighting/pen/ZeJdvg/" target="_blank" rel="noopener">ZeJdvg</a> by Yang Cong (<a href="http://codepen.io/nighting" target="_blank" rel="noopener">@nighting</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p>这俩属性是用在子元素上的，如果想给某个 grid 内的所有元素统一添加，可以使用</p><ul><li>align-items</li><li>justify-items</li></ul><p>这两个属性</p><p>在 webkit 官网的介绍中也有这样一张能够一目了然的图</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-092949.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-15-092949.jpg"></p><h1 id="从入门到入门"><a href="#从入门到入门" class="headerlink" title="从入门到入门"></a>从入门到入门</h1><p>有了 Grid 布局，我们可以很方便得完成非常多复杂的布局。</p><p>譬如之前研究过的双飞翼布局和圣杯布局，通过 Grid 来写的话，是非常方便的。</p><p>再譬如一些非常复杂的图文混排的布局，grid 也可以非常轻松的实现。</p><p>不过现在 grid 的支持度还很低，从目前还有无数公司兼容 IE6的生态来讲，想在生产环境用上 grid 仿(jiu)佛(shi)是个遥不可及的事情……</p><p>不过这也抵不住前端汪折腾的心啊。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://meyerweb.com/eric/thoughts/2017/03/07/welcome-to-the-grid/" target="_blank" rel="noopener">welcome to the grid</a></p><p><a href="https://hacks.mozilla.org/2017/03/firefox-52-introducing-web-assembly-css-grid-and-the-grid-inspector/" target="_blank" rel="noopener">Firefox 52: Introducing Web Assembly, CSS Grid and the Grid Inspecto</a></p><p><a href="https://webkit.org/blog/7434/css-grid-layout-a-new-layout-module-for-the-web/" target="_blank" rel="noopener">Webkit - CSS Grid Layout: A New Layout Module for the Web</a></p><p><a href="https://14islands.com/blog/2017/03/07/playing-with-CSS-grids/" target="_blank" rel="noopener">Playing with CSS Grids</a></p><p><a href="http://jeffbridgforth.com/css-grid-first-steps/" target="_blank" rel="noopener">CSS Grid: First Steps</a></p><p><a href="https://rachelandrew.co.uk/archives/2017/03/03/learning-css-grid-layout/" target="_blank" rel="noopener">Learning CSS Grid Layout</a></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSS 的 Grid Layout 已经开始在浏览器上有资词啦！&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://7xokxd.com1.z0.glb.clouddn.com/blog/2017-03-14-142653.jpg&quot; alt=&quot;caniuse&quot;&gt;&lt;/p&gt;&lt;p&gt;可
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>来把Github的navbar变回来吧</title>
    <link href="http://yoursite.com/2017/02/13/%E6%9D%A5%E6%8A%8AGithub%E7%9A%84navbar%E5%8F%98%E5%9B%9E%E6%9D%A5%E5%90%A7/"/>
    <id>http://yoursite.com/2017/02/13/来把Github的navbar变回来吧/</id>
    <published>2017-02-13T02:52:16.000Z</published>
    <updated>2018-03-19T13:24:18.542Z</updated>
    
    <content type="html"><![CDATA[<p>就这周六，Github 突然把他们网站的 navbar 变成黑色的了……</p><p>好丑……</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/77C6307A-DE84-4239-ACD9-6A6EC56006CD.jpg" alt=""></p><p>就连尤雨溪都在某著名404网站上吐槽了……</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/CAD6F43F-6630-434E-BA86-FC946E792307.png" alt=""></p><p>作为尤雨溪的钟实迷弟，我当然要蹭一波热点。。。咳</p><p>来，让我们把 gayhub 的 navbar 变回去。</p><p>首先得有一个梯子，不然你连一些 404 网站都无法访问是吧。</p><p>然后你得有个 Chrome 浏览器，据说 Firefox 也可以，其他的浏览器……用其他浏览器的应该也用不到 Github 吧？</p><p>首先我们需要这个玩意儿 <a href="https://chrome.google.com/webstore/detail/stylish-custom-themes-for/fjnbnpbmkenffdnngjfgmeleoegfcffe" target="_blank" rel="noopener">stylish on chrome webstore</a> ，点击就送屠龙宝刀。安装一下啦，这个是用来修改网站样式的一个小插件啦。</p><p>安装完成之后， <a href="http://userstyles.org/styles/138823" target="_blank" rel="noopener">Github white</a> ，点开这个，点一下 Install，就安装了一个小样式。</p><p>之后再打开 Github，你看到的就是下图了</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/github-white.png" alt="Github white"></p><p>是不是变好看了~</p><p>然而我觉得右上角那个小蓝点也是很丑……</p><p>所以我自己也写了个样式， <a href="http://userstyles.org/styles/138859" target="_blank" rel="noopener">Github-Original</a> ，如果你希望也修改一下那个小蓝点的话，可以也安装一下我写的这个样式。</p><p>如果两个样式同时启用的话，大概看起来就像下图了</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/C895733F-E8DD-4FB5-A5B4-958420B39394.png" alt=""></p><p>P.S，左边那个可以看到 repo 的项目结构的插件是这个 <a href="https://github.com/buunguyen/octotree" target="_blank" rel="noopener">Octotree</a></p><p>顺带再推荐几个 Stylish 的样式：</p><ul><li><a href="http://userstyles.org/styles/106272" target="_blank" rel="noopener">Weibo V6</a> 修改了一下 weibo.com 的样式，更简单好用了</li><li><a href="https://userstyles.org/styles/123737/weibo-v6-patch" target="_blank" rel="noopener">Weibo V6 Patch</a> 和上面那个配合使用</li><li><a href="https://userstyles.org/styles/123858/baidu-lite" target="_blank" rel="noopener">百度轻</a> 去除了百度的广告和一些无用的部分</li><li><a href="https://userstyles.org/styles/127217/theme" target="_blank" rel="noopener">百度多栏</a> 建议配合百度轻一起使用，可以把百度的搜索结果变成三栏显示</li></ul><p>更多内容敬请自己探索…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;就这周六，Github 突然把他们网站的 navbar 变成黑色的了……&lt;/p&gt;&lt;p&gt;好丑……&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://7xokxd.com1.z0.glb.clouddn.com/77C6307A-DE84-4239-ACD9-6A6EC56006C
      
    
    </summary>
    
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>DaoVoice和图灵机器人</title>
    <link href="http://yoursite.com/2017/01/22/DaoVoice%E5%92%8C%E5%9B%BE%E7%81%B5%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2017/01/22/DaoVoice和图灵机器人/</id>
    <published>2017-01-22T08:38:16.000Z</published>
    <updated>2018-03-19T13:24:18.541Z</updated>
    
    <content type="html"><![CDATA[<p>首先就是 DaoVoice 了，这是我司的一个产品。主要是用来做运营的，包括客服功能啥的，主打的是用户模型的分析。我现在也在这个产品线下面干活儿。</p><p>然后呢，这真的是个非常好用的工具，所以我就把它集成到我的博客上面了。</p><p>先去 <a href="https://daocloud.io" target="_blank" rel="noopener">daocloud.io</a> 上注册个帐号，然后登录一下，去到 <a href="https://dashboard.daovoice.io" target="_blank" rel="noopener">dashboard.daovoice.io</a> ，新建一个组织，其实上面写的是公司，无所谓啦，选一个喜欢的名字，新建。然后就可以接入了。</p><p>接入代码直接复制粘贴到博客模板的某个区域，提交一下，就能够在博客右下角看到一个小圆圈，点开就可以用啦！</p><p>然后捏，接入图灵机器人，是用的 <a href="http://www.tuling123.com/" target="_blank" rel="noopener">图灵机器人</a> 这个，注册一下。</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/E75B3C20-0FB9-48B3-B9A4-EA08B61A9C2C.png" alt="http://7xokxd.com1.z0.glb.clouddn.com/E75B3C20-0FB9-48B3-B9A4-EA08B61A9C2C.png"></p><p>可以看到 API 地址和 key 和 secret，其实 secret 后面那个按钮就不要点开了，如果没有数据加密相关的东西的话是不需要开的。开了的话就必须要做一系列加密才能调用了，并且也不能用 GET 方式再做调用。</p><p>再之后需要使用 DaoVoice 的 webhook 了，当有用户新消息的时候，通过 webhook 发送到robot 服务端。</p><p>但是由于数据格式不统一，因此需要自己再做一层中转，可以在自己的服务器上搭一个中转的服务。</p><p>配置一个 webhook 到自己的服务器地址，然后把对应的数据传过去，大致需求的数据如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>: <span class="string">"APIKEY"</span>,</span><br><span class="line">  <span class="attr">"info"</span>: <span class="string">"今天天气怎么样"</span>,</span><br><span class="line">  <span class="attr">"userid"</span>: <span class="string">"123456"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>userid</code>用于进行上下文的指定，以防上下文丢失（虽然我觉得配了也没啥上下文），这边可以传入的就是 DaoVoice 的 conversation_id，key 的话就是图灵机器人的 APIkey，info 自然就是信息，对应到 DaoVoice 上就是 <code>conversation_parts[0].body</code> 这个东西了。</p><p>拿到返回值之后，可以再调用 <a href="http://docs.daovoice.io/api/#%E5%9B%9E%E5%A4%8D%E5%AF%B9%E8%AF%9D" target="_blank" rel="noopener">回复对话</a> 这个 API 发送给用户即可。</p><p>完成！So Stupid……</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/DE900FDE-1838-496B-B17B-0E926BDD15BA.png" alt="http://7xokxd.com1.z0.glb.clouddn.com/DE900FDE-1838-496B-B17B-0E926BDD15BA.png"></p><p>大概有这些乱七八糟的功能。</p><p>点击右下角体验吧……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先就是 DaoVoice 了，这是我司的一个产品。主要是用来做运营的，包括客服功能啥的，主打的是用户模型的分析。我现在也在这个产品线下面干活儿。&lt;/p&gt;&lt;p&gt;然后呢，这真的是个非常好用的工具，所以我就把它集成到我的博客上面了。&lt;/p&gt;&lt;p&gt;先去 &lt;a href=&quot;http
      
    
    </summary>
    
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>在微信小程序中引入 RxJS</title>
    <link href="http://yoursite.com/2017/01/16/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E5%BC%95%E5%85%A5-RxJS/"/>
    <id>http://yoursite.com/2017/01/16/在微信小程序中引入-RxJS/</id>
    <published>2017-01-16T09:35:02.000Z</published>
    <updated>2018-03-19T13:24:18.541Z</updated>
    
    <content type="html"><![CDATA[<p>前些天看到一片文章 <a href="https://gold.xitu.io/post/5870bd4b61ff4b005c3c4f6e" target="_blank" rel="noopener">现学现卖微信小程序开发（三）：引入“Rx”，为小程序插上翅膀</a></p><p>最终作者还是没有引入 RxJS，是使用了一个叫<code>xstream</code>的代替库来使用的。</p><p>由于自己也在微信小程序中使用到了 RxJS，并且成功引入了，因此分享一下引入的方法。</p><p>首先微信小程序的话，就不要用类似 npm 这样的包管理来安装了。我在<a href="https://staticfile.org/" target="_blank" rel="noopener">七牛云 CDN</a> 找到了 RxJS 的 CDN 下载地址：<a href="https://cdn.staticfile.org/rxjs/5.0.1/Rx.min.js" target="_blank" rel="noopener">https://cdn.staticfile.org/rxjs/5.0.1/Rx.min.js</a></p><p>下载完之后，打开 Rx.min.js 文件，在顶部 license 下面添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">window</span> = &#123;</span><br><span class="line">  <span class="built_in">Object</span>,</span><br><span class="line">  setTimeout,</span><br><span class="line">  clearTimeout</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.window = <span class="built_in">window</span>;</span><br></pre></td></tr></table></figure><p>在<code>var __extends,__assign,__decorate,__param...</code>这一行的下面一行，开头的<code>(function(l){function ...</code>这个部分，加上如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">global=<span class="keyword">this</span>;</span><br></pre></td></tr></table></figure><p>然后这段代码就变成了: <code>(function(l){global=this;function</code></p><p>然后RxJS 内部对于顶级变量的依赖就处理掉了。</p><p>RxJS内部还会用到 Promise，微信小程序本身不提供 Promise 的支持，因此我们需要引入一个 Promise 库。</p><p>选用的是 es6-promise 这个库，地址是 <a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="noopener">https://github.com/stefanpenner/es6-promise</a>，压缩过的版本只有 6kb，而且这个库同时兼容微信小程序的 iOS 和 Android 版本。</p><p>然后在项目根目录的 <code>app.js</code> 内引入这个库。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'./lib/es6-promise.min'</span>);</span><br></pre></td></tr></table></figure><p>在<code>app.js</code>的<code>onLaunch</code>函数内添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.promise = <span class="built_in">Promise</span>;</span><br><span class="line">&#125;, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这样就ok 啦！</p><p>在开启不开始 ES6 转 ES5 选项的时候，RxJS 都可以在项目中正常使用了。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Rx = <span class="built_in">require</span>(<span class="string">'../../lib/Rx.min'</span>);</span><br></pre></td></tr></table></figure><p>即可！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前些天看到一片文章 &lt;a href=&quot;https://gold.xitu.io/post/5870bd4b61ff4b005c3c4f6e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;现学现卖微信小程序开发（三）：引入“Rx”，为小程序插上翅膀&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>致我最忙碌的2016</title>
    <link href="http://yoursite.com/2017/01/02/%E8%87%B4%E6%88%91%E6%9C%80%E5%BF%99%E7%A2%8C%E7%9A%842016/"/>
    <id>http://yoursite.com/2017/01/02/致我最忙碌的2016/</id>
    <published>2017-01-02T10:23:25.000Z</published>
    <updated>2018-03-19T13:24:18.538Z</updated>
    
    <content type="html"><![CDATA[<p>我也跟风来一波我的2016总结。</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/home_sky.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/home_sky.jpg"></p><h2 id="关于学业"><a href="#关于学业" class="headerlink" title="关于学业"></a>关于学业</h2><p>首先自然会想到学习的事情，毕竟还是一个根正苗红的学生党，去景区还享受着半价，想到还在薅国家的羊毛就觉得很罪恶。</p><p>其实我很不想说这个。大三上学期还好，对于2016来说其实就一次期末考试。过完寒假之后就是大三下学期，这学期基本就没在关心学习的事情了。去北京以后某段时间还经常会赶回学校参加考试，早上回济南下午考试晚上回北京然后第二天继续上班。最后挂了一堆课程，不管了啦。</p><p>晋入大四之后就没有太多困扰了，年末的时候也就是前两天开始选毕业论文的题目，还没想好，可能会选择之前做的基于Docker和区块链的项目，也可能会再想个题目。其实我更想做个图书管理系统，简单粗暴拉模板。</p><p>17年没啥好说的，向毕业看齐。</p><h2 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h2><p>这是重点吧感觉。</p><p>毕竟16年大半大半的时间都混在这事儿上面了。</p><p>大概从过完年，三月份就开始找实习了。不太记得了，好像投了不少简历。托@高荃 大爷 的内推，得幸拿到百度的offer。那段时间也是我高速学习的一个时间，不太好描述我成长了多少倍，毕竟除以0是很违规的。自我感觉的话，那段时间的工作让我接触到了更多更多更多，让我从一个初初入门的前端人，慢慢发展到一个能够符合岗位要求的、未必合格但已经具有一些程序猿素质的前端开发者了。</p><p>后来的后来，很多原因的促使之下，我想来上海了。</p><p>就在10月份的末尾开始找工作，也是投了不少地方，也是参加了不少面试，最后也是拿到了一些offer。</p><p>选择DaoCloud其实是个很迅速的决定……面试的时候能够感受到公司的工程师文化和面试官大人的高水准，也算是一个互相肯定的过程吧。</p><p>之前的话，如果有机会我还是愿意待在百度的。只是百度上海研究院给的offer……怎么说呢，不是很喜欢那个部门吧。可能那就是稳定和发展的抉择了，我觉得DaoCloud能让我得到更多的发展，所以就迅速的选择了DaoCloud。</p><p>十一月初入职DaoCloud，这里的工程师文化让我确实很喜欢。包括开始学习之前完全没接触过的Angular，入职第一天就要求维护官网项目，当周上线。第二周又开始完全参与一个新的产品开始，独自负责前端部分的研发，那周也直接达成了加班到五点的成就。后来又开始独自做某条产品线的微信小程序，又是一种完全没接触过的框架，非常非常多的坑。磕磕绊绊之下如今也算开发的不错了。</p><p>下一年，还是期望自己的工作能稳定下来，希望有自己喜欢的工作。</p><h2 id="关于技术"><a href="#关于技术" class="headerlink" title="关于技术"></a>关于技术</h2><p>16年学了不少新东西。</p><p>接触了smarty和handlebars，vue.js和angular，被安利然后开始学RxJS，学习webSocket，写微信小程序，真的是太特么多了。</p><p>后端方面接触一点Node.js，包括express，还有一些爬虫相关。也写过一些小东西，来上海租房的时候，嫌豆瓣小组没有筛选系统，自己搞了一下，方便自己找房子。虽然最后也没通过这个找到房子，辣鸡。</p><p>还有很多只碰过一次两次的东西，jQuery Mobile之流。</p><p>参加了JSconf和谷歌GDG还有D2，确实学到了很多东西。</p><p>前端真是发展太快了，大佬们也是经常撕逼，我还是跟风学好了。不过至今我依旧是vue粉。</p><h2 id="关于行程"><a href="#关于行程" class="headerlink" title="关于行程"></a>关于行程</h2><p>这应该是我跑得特别多的一年了。真的是到处跑。</p><p>年初在济南，寒假又回到南通过年。过完年再回到济南。</p><p>找到工作之后，和舍友们一起去了趟南京，旅游。</p><p>从南京回来就去北京了，开始工作。期间数次回去济南考试。</p><p>九月初去南京参加JSconf，错过了组里去内蒙古乌兰巴托大草原的团建，sad。在南京那几天还去了一趟芜湖。</p><p>回北京，十月底离职。</p><p>然后去南京给某人过生日，之后奔赴上海。</p><p>十二月初去到杭州，参加D2。</p><p>回上海，年底去到湖州南浔，旅游。</p><p>一年大抵如是。</p><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>这是我最浪的一年，生活质量没见得提高多少，但是消费真正的爆炸了。</p><p>买了kindle，买了kindle unlimited，开始看书。也就是说今年看的大部分书都是买了kindle之后才看的……从双十一入手之后，至今共看过十六本书。其中包括全套的《龙族》，以及三册《三体》，以及应该算不上是书的《北京折叠》。</p><p>买了小米手环，当做来电提示和闹钟来使用。效果还算可以。</p><p>买了iPhone 6s，失去了折腾安卓的热情，稳定耐操的iOS系统是个非常好的选择。</p><p>买了一个入门级的机械键盘，手感还挺好，提高了编码效率（really?）。</p><p>看了很多场电影，有得有失。12月30号才上映的《你好，疯子》也算是看到的遗珠，非常欣喜。作为哈利波特粉看到《神奇动物在哪里》真的是激动到不行。</p><p>偶尔和朋友去打羽毛球，运动一下也挺好。有时候看到又有程序猿猝死，调侃完之后就特担心下一个就是自己。</p><p>工作之后开始做饭，因为外卖真的是太难吃太贵了。从一个叫『下厨房』的app开始学，然后现在已经能做一些家常菜了。</p><p>买了不少衣服，在未知神秘因素的影响下，衣服花费开始飙高，然而我自己还是没有变好看，毕竟脸就这样。</p><p>买了好些书，《你不知道的JavaScript》上中两本，《深入浅出Node.js》，还有包括龙神签名赠送的《Learning TypeScript中文版》。其实还都没怎么看，我真辣鸡，17年一定要好好看书。</p><p>出学校之后，吃饭花费也飙高，但始终觉得没多好吃。上海消费确实超高，平均吃一顿得30块左右，我工资都快不够我吃饭了。感觉自己对吃的还是特别挑剔呀。</p><p>想想觉得还有很多要说的，但又不知道还有什么要说的。</p><p>我在Day One建的日记本名字是： 关于生存和生活的把戏。聊生活的时候总是撇不开生存，没办法，做不到完全没有生存压力的生活，只能在生存的间隙给自己找点乐子，喘几口气，美其名曰，生活。后来日记写了没几篇就没坚持下去了。</p><h2 id="关于自己"><a href="#关于自己" class="headerlink" title="关于自己"></a>关于自己</h2><p>我长胖了。</p><p>我觉得自己变帅了，如果你没有觉得，那我得问问你你是什么时候瞎的了。</p><p>我没长高，也这个年纪了，长高估计没啥希望了。</p><h2 id="关于2017"><a href="#关于2017" class="headerlink" title="关于2017"></a>关于2017</h2><p>没啥计划。</p><h2 id="All"><a href="#All" class="headerlink" title="All"></a>All</h2><p>这一年总算过去了，真的有很多收获，也有非常赞的经历。</p><p>但或许是身边的朋友都太赞了，所以还是觉得自己太差劲了。</p><p>说什么知足常乐真是太假了，真的觉得自己应该努力一下，再努力一下。</p><p>没啥了，祝大家新年快乐，鸡年大吉吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我也跟风来一波我的2016总结。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://7xokxd.com1.z0.glb.clouddn.com/home_sky.jpg&quot; alt=&quot;http://7xokxd.com1.z0.glb.clouddn.com/home_sky.
      
    
    </summary>
    
    
      <category term="闲聊" scheme="http://yoursite.com/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>HTML5.1的新特性们</title>
    <link href="http://yoursite.com/2016/12/06/HTML5-1%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E4%BB%AC/"/>
    <id>http://yoursite.com/2016/12/06/HTML5-1的新特性们/</id>
    <published>2016-12-06T07:10:00.000Z</published>
    <updated>2018-03-19T13:24:18.538Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址 <a href="https://www.sitepoint.com/whats-new-in-html-5-1/" target="_blank" rel="noopener">What’s New in HTML 5.1</a></p><h2 id="小探HTML-5-1"><a href="#小探HTML-5-1" class="headerlink" title="小探HTML 5.1"></a>小探HTML 5.1</h2><p>两年前发布的HTML5标准是web开发社区的一件大事儿，不仅仅是因为它带来了一堆很赞的新特性，同样因为，这是自1999年HTML4.01标准发布以来首次更新HTML标准。如今你仍然能看到有些网站吹嘘他们用了HTML5的“新”特性。</p><p>终于我们不需要为下一代的HTML等待很久，在2015年10月，W3C开始修订HTML 5.1的草稿用于修复HTML5中遗留下的问题。经过数次迭代，草稿在2016年6月到达“Candidate Recommendation”的阶段，在2016年9月变为“Proposed Recommendation”，然后在11月终于成为了 <a href="https://www.w3c.com/TR/html" target="_blank" rel="noopener">W3C Recommendation</a> 。关注这个开发过程的人应该都意识到这是一段崎岖的过程，非常多HTML5.1 一开始的特性都因为辣鸡设计或者没有浏览器愿意支持而被抛弃了。</p><p>虽然HTML5.1依然在开发，但W3C已经开始致力于HTML5.2的草稿，HTML5.2暂定于要在2017年初发布。与此同时，这里提供一些5.1中的有趣的新特性的概览，虽然没多少浏览器现在已经支持了这些特性，但是我们还是至少会推荐给你一些能用于测试这些例子的浏览器。</p><h3 id="使用menu和menuitems元素来实现文本菜单"><a href="#使用menu和menuitems元素来实现文本菜单" class="headerlink" title="使用menu和menuitems元素来实现文本菜单"></a>使用<code>menu</code>和<code>menuitems</code>元素来实现文本菜单</h3><p>HTML 5.1 的草稿介绍了两种不同的<code>menu</code>元素：<code>context</code>和<code>toolbar</code>。前者用于扩展原生的菜单，就是常见的右键菜单。后者是要实现简单的菜单组件。在开发过程中，<code>toolbar</code>被放弃了，但是<code>context</code>被保留了下来。</p><p>你可以使用<code>menu</code>标签来定义一个由一个或多个<code>menuitem</code>元素组成的菜单，然后把该元素绑定到任意一个有<code>contextmenu</code>属性的元素上去。</p><p>每个<code>menuitem</code>可以拥有下面三个之中任意一个类型：</p><ul><li>checkbox : 允许用户选中或者取消选中</li><li>command : 允许用户在点击时执行一个方法</li><li>radio : 允许用户在一个选项目里面选择其中一个</li></ul><p>这里有个demo，能够在Firefox 49及以上版本运行，但是没法在Chrome 54里面跑(注：Chrome全版本都不行)。</p><p><a href="http://codepen.io/SitePoint/pen/bBrvRP" target="_blank" rel="noopener">http://codepen.io/SitePoint/pen/bBrvRP</a></p><p data-height="265" data-theme-id="0" data-slug-hash="bBrvRP" data-default-tab="html,result" data-user="SitePoint" data-embed-version="2" data-pen-title="HTML 5.1 menu example" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/bBrvRP/" target="_blank" rel="noopener">HTML 5.1 menu example</a> by SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="noopener">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p>在能够支持的浏览器里面，菜单看起来应该是这样的：<br><img src="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/11/1480252659menu.png" alt="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/11/1480252659menu.png"></p><h3 id="细节-Details-和总结-Summary-的元素"><a href="#细节-Details-和总结-Summary-的元素" class="headerlink" title="细节(Details)和总结(Summary)的元素"></a>细节(Details)和总结(Summary)的元素</h3><p><code>details</code>和<code>summary</code>元素实现了通过点击来展示和隐藏某个展示额外信息的块。这事儿原本是用JavaScript来做的，但现在可以完全通过<code>summary</code>元素以及一个内部的<code>details</code>元素来实现。点击<code>summary</code>来展示或隐藏<code>details</code>元素内的内容。</p><p>下面的例子可以在Firefox以及Chrome里面测试(注: Firefox 49及以上，Chrome 12之后就可以，其余浏览器的支持状况也很不错)</p><p><a href="http://codepen.io/SitePoint/pen/rWzgzg" target="_blank" rel="noopener">http://codepen.io/SitePoint/pen/rWzgzg</a></p><p data-height="265" data-theme-id="0" data-slug-hash="rWzgzg" data-default-tab="html,result" data-user="SitePoint" data-embed-version="2" data-pen-title="HTML 5.1 details and summary demo" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/rWzgzg/" target="_blank" rel="noopener">HTML 5.1 details and summary demo</a> by SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="noopener">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p>在可支持的浏览器内看起来这个demo会是这样的：</p><p><img src="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/11/1480323427detailsandsummarydemo.png" alt="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/11/1480323427detailsandsummarydemo.png"></p><h3 id="更多的input类型-month，week和datetime-local"><a href="#更多的input类型-month，week和datetime-local" class="headerlink" title="更多的input类型 - month，week和datetime-local"></a>更多的input类型 - <code>month</code>，<code>week</code>和<code>datetime-local</code></h3><p>input的类型库扩展了三个类型：<code>month</code>，<code>week</code>和<code>datetime-local</code>。</p><p>前两个允许你选择一个星期或者一个月份。在Chrome中，这两个都表现为一个下拉日历，并且允许你选择一年中特定的月份或者选择一个星期。当你从JavaScript中取值的时候会获取到一个字符串，<code>week</code>类型的大致是<code>&quot;2016-W43&quot;</code>，<code>month</code>类型的大致会是<code>&quot;2016-10&quot;</code>。</p><p>开始的时候，5.1 的草稿中有两个<code>date-time</code>的input类型 - <code>datetime</code>和<code>datetime-local</code>。不同之处在于，<code>datetime-local</code>永远只能选择用户所在时区的时间，而<code>datetime</code>可以允许你选择不同时区的。在开发中，<code>datetime</code>被废弃了，只剩<code>datetime-local</code>保留下来了。<code>datetime-local</code>由两个部分组成 - 日期，以类似<code>week</code>和<code>month</code>的方式被选择，以及 时间部分，可以单独得输入。</p><p>以下的demo里面有以上几种类型的应用，可以在Chrome里面运行，但是Firefox不行。</p><p><a href="http://codepen.io/SitePoint/pen/xRLowg" target="_blank" rel="noopener">http://codepen.io/SitePoint/pen/xRLowg</a></p><p data-height="265" data-theme-id="0" data-slug-hash="xRLowg" data-default-tab="html,result" data-user="SitePoint" data-embed-version="2" data-pen-title="HTML 5.1 week, month and datetime inputs" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/xRLowg/" target="_blank" rel="noopener">HTML 5.1 week, month and datetime inputs</a> by SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="noopener">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p>大概看起来是这样的：</p><p><img src="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/11/1480324745weekmonthdatetime.png" alt="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/11/1480324745weekmonthdatetime.png"></p><h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><p>HTML 5.1 包括几种不需要使用CSS来实现响应式图片的特性。每个特性都有他们的单独使用用例。</p><h4 id="srcset-图片属性"><a href="#srcset-图片属性" class="headerlink" title="srcset 图片属性"></a><code>srcset</code> 图片属性</h4><p><code>srcset</code>图片属性允许你列出多个可选择的根据像素密度来变化的图片的地址。这样会让浏览器选择一个适合用户设备的图片(取决于设备的像素密度、缩放级别和网速)。比如，你可以提供一个低分辨率的图片给使用小屏手机的或者网速不好的用户。</p><p><code>sreset</code>属性接受一组以逗号分隔的图片URL列表，每个地址都有自己的<code>x</code>修饰符用于描述每个图片最适合的像素比例(一个CSS像素内包含的物理像素个数)。 以下是一个简单的例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/low-res.jpg"</span> <span class="attr">srcset</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">  images/low-res.jpg 1x, </span></span></span><br><span class="line"><span class="tag"><span class="string">  images/high-res.jpg 2x, </span></span></span><br><span class="line"><span class="tag"><span class="string">  images/ultra-high-res.jpg 3x"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，如果用户的像素比例为1，<code>low-res.jpg</code>这种图片会被显实出来，如果是2，那么<code>high-res.jpg</code>这个图片就会展示出来，3倍或者以上的时候，用户就会看到<code>ultra-high-res</code>这张图了。</p><p>你也可以选择来展示不同大小的图片而不是不同分辨率的。用<code>w</code>修饰符就可以达成这样的效果：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/low-res.jpg"</span> <span class="attr">srcset</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">  images/low-res.jpg 600w, </span></span></span><br><span class="line"><span class="tag"><span class="string">  images/high-res.jpg 1000w, </span></span></span><br><span class="line"><span class="tag"><span class="string">  images/ultra-high-res.jpg 1400w"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><p>这样的话，<code>low-res.jpg</code>这张图被定义到600px宽，<code>high-res</code>是1000px，<code>ultra-high-res</code>是1400px。</p><h4 id="sizes图片属性"><a href="#sizes图片属性" class="headerlink" title="sizes图片属性"></a><code>sizes</code>图片属性</h4><p>你可能想要根据用户的屏幕大小来展示不同的图片。比如你想在宽屏上，以两列来展示图片，而在小屏上就变成一列。这个可以使用<code>sizes</code>属性来达成，它可以让屏幕的宽度变成分配给图片的空白(我也没看懂这句话)然后选择合适的图片，这儿有个例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/low-res.jpg"</span> <span class="attr">sizes</span>=<span class="string">"(max-width: 40em) 100vw, 50vw"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">srcset</span>=<span class="string">"images/low-res.jpg 600w, </span></span></span><br><span class="line"><span class="tag"><span class="string">  images/high-res.jpg 1000w, </span></span></span><br><span class="line"><span class="tag"><span class="string">  images/ultra-high-res.jpg 1400w"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><p><code>sizes</code> 属性定义了，当屏幕大于40em的时候，图片的宽度是50%的设备可视宽度。当屏幕小于等于40em的时候，图片宽度就是100%的设备可视宽度。</p><h4 id="picture元素"><a href="#picture元素" class="headerlink" title="picture元素"></a><code>picture</code>元素</h4><p>如果以上还不足以让你根据不同屏幕来选择图片并且你需要展示完全不同的图片，那么你可能需要使用<code>picture</code>元素。<code>picture</code>元素可以让你为不同的屏幕宽度定义不同的图片，只要你把<code>&lt;img&gt;</code>元素放到<code>&lt;picture&gt;</code>元素里面然后指定不同的<code>&lt;source&gt;</code>元素。<code>&lt;source&gt;</code>元素就会变成加载图片的URLs。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(max-width: 20em)"</span> <span class="attr">srcset</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    images/small/low-res.jpg 1x,</span></span></span><br><span class="line"><span class="tag"><span class="string">    images/small/high-res.jpg 2x, </span></span></span><br><span class="line"><span class="tag"><span class="string">    images/small/ultra-high-res.jpg 3x</span></span></span><br><span class="line"><span class="tag"><span class="string">  "</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(max-width: 40em)"</span> <span class="attr">srcset</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    images/large/low-res.jpg 1x,</span></span></span><br><span class="line"><span class="tag"><span class="string">    images/large/high-res.jpg 2x, </span></span></span><br><span class="line"><span class="tag"><span class="string">    images/large/ultra-high-res.jpg 3x</span></span></span><br><span class="line"><span class="tag"><span class="string">  "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/large/low-res.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你对找到更多关于响应式图片的信息感到疑惑，我推荐你一片文章： <a href="https://www.sitepoint.com/how-to-build-responsive-images-with-srcset/" target="_blank" rel="noopener">How to Build Responsive Images with srcset</a></p><h3 id="用form-reportValidity-来验证表单"><a href="#用form-reportValidity-来验证表单" class="headerlink" title="用form.reportValidity()来验证表单"></a>用<code>form.reportValidity()</code>来验证表单</h3><p>HTML5 定义了 <code>form.checkValidity()</code> 方法来验证一个表单的输入与既定的结果是否一致然后返回一个布尔值作为返回值。新的<code>reportValidity()</code>方法和<code>checkValidity()</code>非常相似，它同样允许你验证一个表单然后得到结果，但不同是，<code>reportValidity()</code>可以直接在浏览器里给用户报错。以下是一个示范，可以在Chrome和Firefox里查看：</p><p><a href="http://codepen.io/SitePoint/pen/eBEwjg" target="_blank" rel="noopener">http://codepen.io/SitePoint/pen/eBEwjg</a></p><p data-height="265" data-theme-id="0" data-slug-hash="eBEwjg" data-default-tab="html,result" data-user="SitePoint" data-embed-version="2" data-pen-title="HTML 5.1 report validity demo" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/eBEwjg/" target="_blank" rel="noopener">HTML 5.1 report validity demo</a> by SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="noopener">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p>“First name”输入框会被标志错误因为它必须填写但是现在是空的。当填写不符合要求时，会看起来像这样的：</p><p><img src="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/11/1480326410formvalidation.png" alt="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/11/1480326410formvalidation.png"></p><h3 id="Frames的Allowfullscreen属性"><a href="#Frames的Allowfullscreen属性" class="headerlink" title="Frames的Allowfullscreen属性"></a>Frames的<code>Allowfullscreen</code>属性</h3><p><code>allowfullscreen</code>属性允许你控制表单的内容能否在全屏时展示，比如使用<code>requestFullscreen()</code>方法控制全屏时。</p><h3 id="用element-forceSpellCheck-来做拼写检查"><a href="#用element-forceSpellCheck-来做拼写检查" class="headerlink" title="用element.forceSpellCheck()来做拼写检查"></a>用<code>element.forceSpellCheck()</code>来做拼写检查</h3><p><code>element.forceSpellCheck()</code>方法允许你在文本元素上开启拼写检查。这也是这个列表里第一个还未被任何浏览器支持的特性。这个特性有可能被用来检查还没有被用户直接编辑的元素上的拼写。</p><h3 id="没被实现的特性"><a href="#没被实现的特性" class="headerlink" title="没被实现的特性"></a>没被实现的特性</h3><p>有些特性出现过在HTML 5.1的第一次草稿里，但是因为如没有浏览器的支持等原因最终被移除掉了。一下是一些有意思的特性：</p><h4 id="inert属性"><a href="#inert属性" class="headerlink" title="inert属性"></a><code>inert</code>属性</h4><p>这个属性想用于来禁止掉所有子元素上用户的交互。大致类似于给所有的子元素添加<code>disabled</code>属性。</p><h4 id="dialog元素"><a href="#dialog元素" class="headerlink" title="dialog元素"></a><code>dialog</code>元素</h4><p><code>&lt;dialog&gt;</code>元素提供了对弹出窗口的原生支持。甚至有一种设想，把<code>form</code>表单集成进去 - 设置<code>&lt;dialog&gt;</code>的<code>method</code>属性可以阻止表单把自己提交给服务器，但会关闭掉<code>&lt;dialog&gt;</code>弹窗然后把值返回给弹窗的创建对象。</p><p>这个特性看上去依旧能在Firefox上运行(注: 根据caniuse.com，现在Firefox并不支持，Chrome 37及以上版本和Opera 24及以上版本以及极少数手机浏览器支持此属性)，以下是例子</p><p><a href="http://codepen.io/SitePoint/pen/XNaLOg" target="_blank" rel="noopener">http://codepen.io/SitePoint/pen/XNaLOg</a></p><p data-height="265" data-theme-id="0" data-slug-hash="XNaLOg" data-default-tab="js,result" data-user="SitePoint" data-embed-version="2" data-pen-title="HTML dialog element" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/XNaLOg/" target="_blank" rel="noopener">HTML dialog element</a> by SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="noopener">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><h3 id="额外阅读"><a href="#额外阅读" class="headerlink" title="额外阅读"></a>额外阅读</h3><p>这是一个一点也不完整的HTML 5.1的变化列表。还有许多小的新特性新变化被从当前的标准中移除了，以及很多不被使用的特性也已经被移除了。如果你想要查看完整的变更列表，来读一读这份<a href="https://www.w3.org/TR/html/changes.html#changes" target="_blank" rel="noopener">详细描述文档</a>。 与此同时，让我们期望浏览器方能尽快实现这些新特性吧。</p><p>你最喜欢 HTML 5.1 中的哪个新的方面？在评论中让我们知道吧！</p><script async src="http://assets.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址 &lt;a href=&quot;https://www.sitepoint.com/whats-new-in-html-5-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What’s New in HTML 5.1&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;小探HT
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>我在百度的某一天</title>
    <link href="http://yoursite.com/2016/12/01/%E6%88%91%E5%9C%A8%E7%99%BE%E5%BA%A6%E7%9A%84%E6%9F%90%E4%B8%80%E5%A4%A9/"/>
    <id>http://yoursite.com/2016/12/01/我在百度的某一天/</id>
    <published>2016-12-01T14:07:41.000Z</published>
    <updated>2018-03-19T13:24:18.543Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>离职一个月了才写这个仿佛有些懒惰，不过还是想流水账式得记录一下。老人家了，总是能忘记好多事儿</p></blockquote><h3 id="早"><a href="#早" class="headerlink" title="早"></a>早</h3><p>刚到百度的时候我都是早晨八点半起床的，然后洗漱一下就出门了。一般也不吃早饭，出门走一段，就挤上昌平线。</p><p>早上九点钟之前的昌平线，都是没人权的。能挤进去就挤进去了，挤不上去后面的人推也把你推上去。</p><p>基于此种不人道的行为，我后来把起床时间延后到了九点……</p><p>四站地铁到达农民工聚集地西二旗。</p><p>百度在西二旗附近的百度大厦门口就有班车，通往帝都的其余办公楼。一号线总是能排非常长。下雨堵车的时候，排队等一号线的人流能一直从百度大厦门口延伸到神州数码门口，然后和新浪等班车的同学交汇在一起。刚从地铁站出来要排队的同学就会在雨天更加得纠结，然后随意选一个队伍开始排……</p><p>百度的班车司机都还好，有些认识近路的会抄近路。有些班车不停文思海辉，就会绕开一段路直接到科技园。</p><p>当然也有堵车堵得走不动路的时候。尤其是每每到滴滴那边的时候，都会堵很久，很久。前面的红绿灯路口的绿灯一直非常不科学，往哪儿的都会堵在中间，最后谁都走不了。</p><p>一般到百度科技园门口大概已经十点二十了。</p><p>门口的保安会查工卡，进去就得拎着工卡。不过我离职那天开始普及人脸识别了，不知道现在还查不查。</p><p>到工位坐下，洗洗杯子，泡茶。百度的茶水间提供咖啡机，想喝自己弄。提供菊花、冰糖、柠檬片、绿茶、红枣、果珍等，想喝自己泡。作为一个南方人在干燥的北方特容易上火，所以我每天早上都会泡一壶菊花茶。</p><p>特别苦。</p><p>于是我知道冰糖是干嘛的了。</p><p>茶水间的冰箱里，会有一些零食，我喜欢吃小面包！不过后来小面包都少了很多。所以早餐大概如此，毕竟也快十一点了，马上也要吃午饭了……</p><p>然后开电脑，连上一个叫BAIDU的WIFI，这是一个可以访问内网的WIFI。百度有几个账号体系，wifi密码和公司发的电脑的密码和自己邮箱的密码都是一致的。另一个密码是版本管理工具的密码，百度暂时还是SVN得，所以就是SVN的密码。最后一个密码是百度Hi的密码，这是自己的百度账号的密码。</p><p>作为一个开发人员，我当然很有逼格得打开终端。</p><p>然后ssh到跳板机……不然没法进开发机……</p><p>跳板机起到的作用是对内网机器的访问，可以从跳板机访问到只有内网端口的机器，比如自己的开发机，比如QA提供的测试机。这个访问指的是对机器的访问，ssh访问。</p><p>然后登录跳板机，跳板机是通过token的秘钥加上自己设置的密码作为一个组合密码来登录的。token也就是大家通常见到的类似网银口令之类的东西。这玩意儿的特点就是特别容易丢，补办一次400软妹币……还好我没丢过</p><p>再从跳板机登录到开发机，开发机上一般存放自己的代码啥的。</p><p>之所以要把开发环境放到云端，是有很多原因的。其一就是省去了环境的配置，新来的同学就不需要花费大量时间来pull代码到本地，然后安装一堆环境还不一定能安上。其二就是同组的其他人可以随时看到你的代码，这样就加强了可协作性。其三就是代码放到内网安全啊，不会泄露啊。</p><p>代码放到云端带来的问题就是隔离性，以及开发的便捷性。其实都是可以解决的。隔离的问题其实很简单，大家共享一套环境，但是我们有不同的文件夹，通过密码来附加自己的文件夹的rwx权限。开发的问题，可以通过samba来解决，把文件夹映射到本地，由于同处内网，开发Ctrl+S的时候几乎感觉不到同步的延迟。</p><p>因为samba的存在，所以其实不连接跳板机也是可以直接samba到代码的。</p><p>但是包括commit代码或者make代码到测试机都是需要执行命令的，所以还是需要一个命令行环境的。</p><p>连上环境之后。</p><p>就是收收邮件，看看有没有新需求，或者有没有减需求(做梦)，然后逛逛内网，内网有个非常好的专区叫寻Ta专区………………</p><p>当然我不是那种需求不饱和的人，我一般就开始干活儿了。</p><p>敲代码略过不提。</p><h1 id="午"><a href="#午" class="headerlink" title="午"></a>午</h1><p>吃饭这事儿还是很重要的，大家吃饭的时候都挺随意的。</p><p>科技园一号楼和二号楼地下一层都有食堂。相对来说K2的食堂好一些，菜式更丰富。</p><p>大家一边闲扯一边走去二号楼。</p><p>百度的食堂还是挺贵的，人均一顿大概要二十吧，不过有饭补，每顿也是二十……所以其实还好啦。</p><p>菜的话，都还行，反正比我在软件园食堂吃得好多了……</p><p>但是很奇怪的是我也没吃胖。</p><p>可能我就是吃不胖的把。</p><p>快离职的时候，二号楼食堂新增了烤鸭，然后某天中午我们就早早过去排队，浑浑噩噩得排了半个多小时队伍等到了烤鸭。很便宜，瞬间就吃完了……</p><p>有时候也去一号楼的食堂，近一些，就在楼底下。</p><p>每逢有点事儿，大家可能会一合计就出去吃了。外面不远有个餐馆聚集的地方。大家都钟爱一家叫“藕遇”的小餐馆，为什么钟情于它呢，因为它便宜。</p><p>每次如果出去吃的话，都会花很久，回来都将近两点了。组长看着我们这么晚才干活儿就很难过。</p><p>吃完饭大家可以选择睡一会儿，或者有些人抽烟的就去天台抽根烟。毕竟工作那么劳累，总要放松一下（明明刚开始干活儿</p><h1 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h1><p>其实就是常规的工作，敲代码or开会or扯需求or扯淡or<s>开车</s></p><p>说说常规的工作流程吧。</p><p>PM提需求，然后会有需求评审，一般需求评审都是老板们去的，老大觉得这需求要做，那肯定就要做了。老大们觉得需要不用做，那也是老大们去拒需求……</p><p>一般需求过了之后，PM就会给MRD了，然后开个会提出需求，这时候确认要接需求的程序猿就去会听需求。会上就是各种扯，这个能不能做，这个能不能不做，这个不科学以后再说，这个要不放下一期再做，这个我不想做……等等</p><p>反正确认需求之后，开发人员就得给排期了。大概给个自己的时间点，<s>比如我要三个月的开发时间</s>比如我要两周的开发时间，两周后的周二提测，前提是这周五之前UE能给图。</p><p>之后PM就协调一下RD&amp;UE&amp;QA的时间，确认一个大体的提测时间，上线时间。</p><p>作为一个FE我的首要工作就是等图。等UE大爷们给图，UE大爷们一般都比较忙，所以可能搞不好就要等很久。</p><p>拿到图之后就开发，coding coding coding……</p><p>期间免不了各种改需求改图换人。</p><p>离职之前的一个需求，一个PM负责的这个项目，结果做着做着我和QA都离职了，另外还有个UE休假了。PM就特别崩溃，她接手个项目最后人都没了……</p><p>开发完就提测啦，会发邮件给QA，申请一台测试机。当然得先自测完才提测。</p><p>QA配置好测试机后，就把需要提测的项目代码部署到测试机器上。测试机器和开发机的区别就是，测试机的环境基本等同于线上机器。包括测试机上连的数据和环境版本都是和线上一致的，这样在测试机上部署的代码没问题，可以尽量保证上线之后不出问题。</p><p>代码部署之后QA同学就进入了测试流程，发现bug就在群里艾特，场面一般都非常尴尬。</p><p>anyway</p><p>测试好之后就上线咯，上线流程还是很复杂的。</p><p>当然先是提交到版本库，svn的话就svn ci上去。不可避免各种conflict。</p><p>然后就可以拉版本，代码会自动部署到沙盒机器，要求去沙盒机器确认效果。</p><p>沙盒机器是一个环境数据等同于线上机器的机器，测试机毕竟还是QA自己部署的，还需要经过一轮线上机器的检测才能上线。</p><p>每天会有人值班上线，大家把需要提交的代码版本确认一下，值班同学就开始统一上线。</p><p>上线的话会经过几个阶段，单台机器，单列机器，单机房机器，全量。</p><p>单台就是代码会部署到某一台线上机器上，运气好的话刷刷就能刷到效果，当然确认效果的时候还是通过地址直接进行访问的。</p><p>单列就是一列机器，单机房就是一个机房的机器，全量就是所以线上机器。</p><p>没记错的话总共有五个机房吧，土城机房，华南北机房，杭州机房，南京机房，还有个在哪儿忘了……</p><p>全量完就最后确认一遍效果，没问题就ok，有问题就智障，早干嘛去了……有问题就赶紧回滚代码……</p><p>总的流程还是非常非常复杂的……</p><h1 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h1><p>下午上线没上线的都差不多该吃饭的。</p><p>吃完饭大家颓废一会儿，继续coding，或者有些人没事儿的就下班了。</p><p>我一般情况下就七点半到八点半之间下班，到家一般九点之后。</p><p>晚上的地铁还好一些，没那么拥挤。</p><p>加班的就比较辛苦了，不过九点之后打车可以报销。</p><p>我记得我最晚一次是一点多下班的。真辛酸啊。</p><h1 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h1><p>这样的日子我过了半年，整整六个月。</p><p>2016.4.20号入职，2016.10.20号离职。</p><p>这段经历确确实实让我更好的参与秋招，让我变得更好了。</p><p>所以我觉得， 有机会早点出来实习的，抓住机会出来实习。多出半年的实习经验，在参与秋招的时候是完全不一样的。@高荃 同学就是个活生生的例子啊</p><p>最后晒一下我在百度时候的工位吧。</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/baidu_gongwei.jpg" alt="http://7xokxd.com1.z0.glb.clouddn.com/baidu_gongwei.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;离职一个月了才写这个仿佛有些懒惰，不过还是想流水账式得记录一下。老人家了，总是能忘记好多事儿&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;早&quot;&gt;&lt;a href=&quot;#早&quot; class=&quot;headerlink&quot; title=&quot;早&quot;&gt;&lt;/a&gt;早&lt;/h3
      
    
    </summary>
    
    
      <category term="工作" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>秋招的心酸经历</title>
    <link href="http://yoursite.com/2016/10/16/%E7%A7%8B%E6%8B%9B%E7%9A%84%E5%BF%83%E9%85%B8%E7%BB%8F%E5%8E%86/"/>
    <id>http://yoursite.com/2016/10/16/秋招的心酸经历/</id>
    <published>2016-10-16T12:41:43.000Z</published>
    <updated>2018-03-19T13:24:18.545Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不要害怕尝试，如果错了就再试一次。如果不行了就换一种方法再试，坚持下去，总有一天你会知道，可能一开始就不该这么试。 – 丛·妥斯妥耶夫斯基·帅·九九</p></blockquote><p>2016年的校招，比以往时候来的更早一些。刚开始实习没多久的萌新，我还没接受这样的美好的氛围，秋招就这么开始了。</p><p>一开始让我参加秋招我是拒绝的，直到后来老板说我们组没有HC。</p><p>我就在2016年的热成狗的末夏投出了我的第一份秋招简历，然后挂了。</p><p>日……</p><p>陆续找别的地方，慢慢积累了一点<s>人生</s>秋招的经验。</p><h3 id="百度糯米"><a href="#百度糯米" class="headerlink" title="百度糯米"></a>百度糯米</h3><p>同事给我投了百度糯米的商业基础平台部。两面全过，给正式offer。拒之</p><h4 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h4><p>我已忘记了面试的内容，只记得那是一天下午。</p><ul><li>手写个类，含有私有变量</li><li>写个闭包的使用样例</li><li>写个斐波那契</li><li>筛选出一个数组中的数字</li></ul><h4 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h4><ul><li>vue中的双向绑定是怎么实现的</li><li>define(“module”, [a,b,c], function(a,b,c){}) 这个模块化的函数是怎么实现的。三个参数怎么实现。</li><li>正则，从如 aabbbccdddaa中提取出 abcda，用一条正则</li></ul><p>最后给了正式offer，希望内部transfer过去。</p><h3 id="腾讯IMweb-Team"><a href="#腾讯IMweb-Team" class="headerlink" title="腾讯IMweb Team"></a>腾讯IMweb Team</h3><p>我在腾讯join.qq.com投完简历第二天就约我面试，哭</p><ul><li>XMLHTTPrequest的过程</li><li>事件委托</li><li>监听事件时候传入的 e 是啥，e.target有没有兼容性问题</li><li>jQuery的，产生jq对象的过程，比如传入一个 ‘#id’，在jQuery内部都经历了什么</li><li>面向对象，公有属性和私有属性</li><li>创建一个父类，子类可以继承其公有变量，不能继承私有变量</li></ul><p>基本全挂，还有两个上机敲代码题</p><ul><li>动态生成100个li，然后1s后倒转，禁用 innerHTML和innerText</li><li>实现一个搜索框，输入的时候可以动态提示</li></ul><p>第一题坑了会儿，最后还是用了innerText。</p><p>其实，可以createTextNode，然后在append进去</p><h3 id="腾讯AlloyTeam"><a href="#腾讯AlloyTeam" class="headerlink" title="腾讯AlloyTeam"></a>腾讯AlloyTeam</h3><p>当我以为之前挂了的时候，竟然迎来了二面，不过已经换成了AlloyTeam的。</p><p>二面详细问了很多东西。由浅入深，都有。</p><ul><li>webpack怎么在打包的时候把某个模块独立出来打包</li><li>浏览器缓存机制， ETag是怎么对比的</li><li>闭包有什么用</li></ul><p>印象比较深的是这三个问题吧，都回答得不是很好，可能就是挂掉的原因吧。</p><h3 id="饿了么"><a href="#饿了么" class="headerlink" title="饿了么"></a>饿了么</h3><p>这是一段惨痛的经历了……那会儿在南京，说好十点打电话面试的，我等到了十点半……</p><ul><li>判断一个object是array</li><li>创建一个element，插入到一个元素的前面，兼容IE8</li><li>ES6的箭头函数，与普通函数的区别？</li><li>for of 和for in的区别</li><li>求一维数组的连续最大乘积</li><li>getElementsByClassName，返回的是个啥？（伪数组），和正常数组有啥不一样？ （有下标访问和length，没有pop push 等函数），那么怎么转换成一个普通数组？（Array.prototype.slice.call）</li></ul><p>很忧伤啊，第二题那个，我不知道<code>insertBefore</code>这个函数。</p><p>估计是表现太差，也给我挂了。</p><h3 id="平安陆金所"><a href="#平安陆金所" class="headerlink" title="平安陆金所"></a>平安陆金所</h3><p>寸老师的部门，我跑去了陆金所北京分部面试……来回路程跑了俩小时，面了二十分钟</p><ul><li>jQuery的作用</li><li>vue和angular以及react的区别</li><li>webpack和gulp</li></ul><p>最后也是给过了，给了offer。</p><p>但是月薪2k，实在不足以在陆家嘴活下去啊……这真的是生存有困难啊……</p><p>抉择之下只能拒了……</p><h3 id="DaoCloud"><a href="#DaoCloud" class="headerlink" title="DaoCloud"></a>DaoCloud</h3><p>在拉钩上投了DaoCloud，然后就是一周的面试过程……</p><h4 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h4><p>看到来电是南通的，一阵熟悉，然后也比较轻松……</p><p>问了很多基础问题，有几个忘了的，面试官也都提示了，非常开心。</p><h4 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h4><p>二面要求写代码了，也是打开了google doc。</p><blockquote><p>foo(1) //1<br>foo(1,2) //3<br>foo(1,2,3) //6</p></blockquote><p>实现这么个函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.reduce(<span class="function">(<span class="params">na, nb</span>)=&gt;</span> (na + nb););</span><br></pre></td></tr></table></figure><p>这就延伸出了几个问题</p><ul><li>reduce的第二函数 （初始值</li><li>const 和 let的区别</li><li>如果不用…args呢</li></ul><blockquote><p>String length: 1~1000, Array length: 3~<br>Sample Input:<br>[‘ab’, ‘cd’, ‘aaa’, ‘ddd’, ‘ere’, ‘hello’, ‘ddd’, ‘ddd’, ‘aaa’, ‘cd’, ‘cd’]<br>Sample Output:<br>[‘ddd’, ‘cd’, ‘aaa’]</p></blockquote><p>其实就是找出出现次数最多的三个</p><p>我是直接维护三个变量</p><blockquote><p>Invert Binary Tree<br>class node{<br>constructor(l:node, r:node){<br>this.l = l;<br>this.r = r;<br>}<br>}</p></blockquote><p>翻转二叉树</p><p>我写了个递归形式的，然后面试官要求改成尾递归，我不会，此题卒</p><blockquote><p>Implement a function <code>foo(arr: Array&lt;any&gt;): Array&lt;Function&gt;</code>, every function in the array will return the cetain value in the initial array.<br>Sample Input:<br>[1, 2, 3]<br>Sample Output:<br>[…].forEach(e=&gt;console.log(e())); //1 2 3</p></blockquote><p>这题其实很简单，要注意循环时候的i的取值</p><blockquote><p>Implement a function <code>foo(arr: Array&lt;Object&gt;)</code>, to sort the array. The object with more properties is bigger.</p></blockquote><p>这题要求property不仅包括可枚举的，也包括不可枚举的。</p><p>不会，因为不知道咋循环不可枚举的。</p><p>后查mdn， 使用 <code>Object.getOwnPropertyNames()</code>可以获取一个object的所有属性，包括可枚举的以及不可枚举的。</p><blockquote><p>一个文件，有20亿个QQ号，排序</p></blockquote><p>外部排序，结合归并啥的</p><blockquote><p>对 《2016年学习前端是怎么样的体验》 一文的看法</p></blockquote><p>我上去就是一顿扯</p><p>二面总体还好，有些api不记得我也是很虚……</p><h4 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h4><p>三面更多问了些新技术啥的。</p><ul><li>对websocket的理解</li><li>自身的技术栈</li><li>为啥选择vue不选择angular</li><li>前端性能优化的点</li><li>为啥要使用cdn</li><li>用过docker吗</li><li>对Linux了解吗</li><li>RxJS有什么用</li><li>对前端发展有什么样的规划</li></ul><p>最终daocloud也是给了offer，我也很喜欢，估计最后就是去daocloud了</p><h3 id="百度校招"><a href="#百度校招" class="headerlink" title="百度校招"></a>百度校招</h3><p>莫名情况下，就投了校招，我本以为校招已经结束了的。</p><p>约了周六下午面试。</p><h4 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h4><p>一面很轻松，面试官看到我还在百度实习，就比较轻松……</p><p>自我介绍的时候我说我喜欢vue，面试官表示她也很喜欢vue，因为她觉得尤雨溪太帅了……我说我见过尤雨溪真人，她就特别激动……</p><p>我就预料到了这次面试的结果……</p><p>然后也是随便扯了两个问题</p><ul><li>实现一个移动端的瀑布流</li><li>图片优化有哪些</li><li>getElementsByTagName和querySelectorAll 的区别</li><li>数组的哪些操作不会返回一个新数组</li></ul><p>第三题那个，涨见识了。</p><p><code>getElementsByTagName</code>这个，最后返回的伪数组nodeList，是会随着dom树的变化而变化的，如下图：</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/shot6.png" alt="http://7xokxd.com1.z0.glb.clouddn.com/shot6.png"></p><p>这个之前还真的是不知道的……</p><p>然后就过了一面……</p><h4 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h4><p>二面面试官人也很好……我仿佛又看到了面试结果……咳咳</p><ul><li>写个快排吧</li><li>object==object， null==undefined， NaN==NaN的值都是啥</li><li>ES6知道些啥</li><li>promise是干啥的</li><li>解决callback hell还有别的策略吗</li><li>css垂直居中的策略有哪些</li></ul><p>然后也过了</p><p>二面过了我去旁边休息的时候，一面的面试官小姐姐还跟我说加油↖(^ω^)↗</p><h4 id="三面-1"><a href="#三面-1" class="headerlink" title="三面"></a>三面</h4><p>三面都是些比较宏观的问题</p><ul><li>做过哪些项目，在项目中担任了啥角色，遇到了哪些问题，咋解决的</li><li>team里面让你一直做文档，一直做文档，你怎么解决？</li><li>和PM有意见不一致会怎么办？</li><li>了解些新技术吗？</li><li>为啥不学node？</li><li>介绍下自己印象最深的项目？</li></ul><p>最后面试官问我，非得去上海吗？不能留在北京吗？</p><p>我仿佛也看到了面试结果……</p><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>其余的也投了 蘑菇街，微店，百姓网等，都没啥消息。 蘑菇街和百姓网估计是直接把我简历挂掉了，/(ㄒoㄒ)/~~</p><p>另外还有携程和思必驰两家也是面试了，两家到现在都还没消息。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>真是忧伤的一生啊</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;不要害怕尝试，如果错了就再试一次。如果不行了就换一种方法再试，坚持下去，总有一天你会知道，可能一开始就不该这么试。 – 丛·妥斯妥耶夫斯基·帅·九九&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2016年的校招，比以往时候来的更早一些。刚开始实习没多久的萌
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序实践-Bilibili排行榜</title>
    <link href="http://yoursite.com/2016/10/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E8%B7%B5-Bilibili%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    <id>http://yoursite.com/2016/10/09/微信小程序实践-Bilibili排行榜/</id>
    <published>2016-10-09T08:58:11.000Z</published>
    <updated>2018-03-19T13:24:18.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>最近微信小程序很火，于是趁机学了一下。然后做了个小的demo，实现了查看B站排行榜的功能。</p><p>项目地址 <a href="https://github.com/congjiujiu/bilibiliRank" target="_blank" rel="noopener">https://github.com/congjiujiu/bilibiliRank</a></p><p>由于没有appid，所以没法在微信里面预览。可以clone到本地然后在微信web开发工具里面看到项目。</p><ul><li>git clone <a href="https://github.com/congjiujiu/bilibiliRank.git" target="_blank" rel="noopener">https://github.com/congjiujiu/bilibiliRank.git</a> yourappname</li><li>cd yourappname</li><li>在微信web开发工具里面新建项目，地址选到刚clone的地址</li></ul><p>即可查看了。</p><p>效果gif可以看 <a href="https://github.com/congjiujiu/bilibiliRank/blob/master/readme.md" target="_blank" rel="noopener">github</a> 的演示！</p><h3 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h3><p>先创建初始页面，也就是两部分，顶上图片，以及下方列表。</p><p>用你喜爱的编辑器打开 <code>pages/index/index.js</code>，编辑一下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//获取应用实例</span></span><br><span class="line"><span class="keyword">var</span> app = getApp()</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    bili: &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">0</span>,</span><br><span class="line">          name: <span class="string">'全区排行榜'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">1</span>,</span><br><span class="line">          name: <span class="string">'番剧排行榜'</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">2</span>,</span><br><span class="line">          name: <span class="string">'原创视频排行榜'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'onLoad'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>表明有三个列表项，然后就可以在<code>index.wxml</code>里面获得数据了</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"cmds"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;bili.list&#125;&#125;"</span> <span class="attr">url</span>=<span class="string">"../ranklist/ranklist?id=&#123;&#123;item.id&#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"cmd-list"</span> <span class="attr">data-id</span>=<span class="string">"&#123;&#123;item.id&#125;&#125;"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上，一个header，通过设置<code>background-image</code>来设置头图，下方通过<code>wx:for</code>方法来循环生成一个列表。<code>navigator</code>标签，可以在点击的时候跳转到<code>url</code>指定的组件内。类似于原生的<code>a</code>标签。</p><p>然后设置一下css，在<code>app.wxss</code>内：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**app.wxss**/</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, Monaco;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(images/logo.jpg);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是全局的样式，单独于这个页面的样式，放到组件对应的<code>wxss</code>内</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**index.wxss**/</span></span><br><span class="line"><span class="selector-class">.cmds</span> &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cmds</span> <span class="selector-tag">navigator</span><span class="selector-pseudo">:first-child</span> <span class="selector-class">.cmd-list</span> &#123;</span><br><span class="line"><span class="attribute">border-top</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cmd-list</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，在微信开发工具内，重启应用。就能看到下图所示的效果了：</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/weixin-bili-1.png" alt="http://7xokxd.com1.z0.glb.clouddn.com/weixin-bili-1.png"></p><h3 id="添加列表页"><a href="#添加列表页" class="headerlink" title="添加列表页"></a>添加列表页</h3><p>在<code>pages</code>文件夹下，添加<code>ranklist</code>文件夹，内部加上应有的文件：</p><ul><li>ranklist.js</li><li>ranklist.wxss</li><li>ranklist.wxml</li><li>ranklist.json</li></ul><p>其中的<code>ranklist.json</code>文件，可以重定义<code>app.json</code>里定义的一些样式，比如顶部导航栏的文字，底部菜单栏等。</p><p>然后，在<code>app.json</code>里注册这个页面：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">// app.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>:[</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/ranklist/ranklist"</span></span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不加会报错滴~</p><p>打开<code>ranklist.js</code></p><p>由于有不同的排行，所以在<code>index</code>跳入的时候，传入了<code>id</code>参数，不同的排行榜对应不同的id，然后也从不同的<code>api</code>获取数据。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ranklist.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    videos: [],</span><br><span class="line">    url: [</span><br><span class="line">      <span class="string">"http://www.bilibili.com/index/rank/all-07.json"</span>,</span><br><span class="line">      <span class="string">"http://www.bilibili.com/index/rank/all-7-33.json"</span>,</span><br><span class="line">      <span class="string">"http://www.bilibili.com/index/rank/origin-07.json"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> rankType = params.id || <span class="keyword">this</span>.data.id;</span><br><span class="line"></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="keyword">this</span>.data.url[rankType],</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            videos: res.data.rank.list.slice(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过<code>params.id</code>来获取跳转时通过参数参入的id。</p><p><code>wx.request</code>可以发送异步请求，详见<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html?t=1475052050838" target="_blank" rel="noopener">api</a></p><p>获取完数据之后，<code>data.videos</code>就会有值了，具体获取到的值，可以在微信开发工具 - AppData 内看到。</p><p>拿到数据之后，就可以在<code>ranklist.wxml</code>内，展示数据了：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ranklist.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">"video-list"</span> <span class="attr">scroll-y</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">class</span>=<span class="string">"video-item"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;videos&#125;&#125;"</span> <span class="attr">url</span>=<span class="string">"../video/video?aid=&#123;&#123;item.aid&#125;&#125;&amp;fav=&#123;&#123;item.favorites&#125;&#125;&amp;coins=&#123;&#123;item.coins&#125;&#125;&amp;typename=&#123;&#123;item.typename&#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"fav"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;item.pic&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span>up主: &#123;&#123;item.author&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"more"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"play"</span>&gt;</span>播放: &#123;&#123;item.play&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"coins"</span>&gt;</span>硬币: &#123;&#123;item.coins&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里用到了<code>scroll-view</code>，是可滚动视图区域。</p><p>加上css：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**ranklist.wxss**/</span></span><br><span class="line"><span class="selector-class">.video-item</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-item</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line"><span class="attribute">border-top</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-item</span> <span class="selector-class">.fav</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-item</span> <span class="selector-class">.info</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">140px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-item</span> <span class="selector-class">.info</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-item</span> <span class="selector-class">.info</span> <span class="selector-class">.up</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-item</span> <span class="selector-class">.info</span> <span class="selector-class">.more</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-item</span> <span class="selector-class">.info</span> <span class="selector-class">.more</span> <span class="selector-tag">view</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-item</span> <span class="selector-class">.info</span> <span class="selector-class">.more</span> <span class="selector-class">.coins</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">right</span>: -<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启应用，即可看到以下效果：</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/weixin-bili-2.png" alt="http://7xokxd.com1.z0.glb.clouddn.com/weixin-bili-2.png"></p><h3 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h3><p>同上，建立<code>video</code>文件夹，同时建立对应的四个文件</p><ul><li>video.js</li><li>video.wxml</li><li>video.wxss</li><li>video.json</li></ul><p>然后注册这个页面</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">// app.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>:[</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/ranklist/ranklist"</span>,</span><br><span class="line">    <span class="string">"pages/video/video"</span></span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>video.js</code>里面，获取传入的数据，因为有些数据通过发现的api拿不到，因此从之前的列表部分传过来。然后将数据放到<code>data.info</code>里面。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//video.js</span></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    info: &#123;&#125;,</span><br><span class="line">    url: <span class="string">'http://app.bilibili.com/x/v2/search'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> aid = params.aid;</span><br><span class="line">    <span class="keyword">var</span> fav = params.fav;</span><br><span class="line">    <span class="keyword">var</span> coins = params.coins;</span><br><span class="line">    <span class="keyword">var</span> type = params.typename || <span class="string">'连载动画'</span>;</span><br><span class="line"></span><br><span class="line">    wx.setNavigationBarTitle(&#123;</span><br><span class="line">      title: <span class="string">'av'</span>+aid,</span><br><span class="line">      compelte: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="keyword">this</span>.data.url,</span><br><span class="line">      data: &#123;</span><br><span class="line">        keyword: <span class="string">'av'</span>+aid</span><br><span class="line">      &#125;,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> info = res.data.data.items.archive[<span class="number">0</span>];</span><br><span class="line">          info.fav = fav;</span><br><span class="line">          info.coins = coins;</span><br><span class="line">          info.type = type;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            info: info</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里通过一个<code>query</code>的接口，查询到一部分视频的信息。同时接收列表页面传递过来的<code>id</code>等信息。</p><p><code>wx.setNavigationBarTitle</code>可以设置导航栏，但是不知道为啥没用。</p><p>数据ok，可以写xml了</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--video.wxml--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;info.cover&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123;info.title&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"type"</span>&gt;</span>&#123;&#123;info.type&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span>UP主: &#123;&#123;info.author&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>&#123;&#123;info.desc&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-list play"</span>&gt;</span><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"icon icon-play"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-text"</span>&gt;</span>&#123;&#123;info.play&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-list danmu"</span>&gt;</span><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"icon icon-danmu"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-text"</span>&gt;</span>&#123;&#123;info.danmaku&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-list coins"</span>&gt;</span><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"icon icon-coins"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-text"</span>&gt;</span>&#123;&#123;info.coins&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很简单的结构哈</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**video.wxss**/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background-image</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">image</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">14px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">22px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.type</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">6px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">background-color</span>: blue;</span><br><span class="line"><span class="attribute">border</span>: none;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.desc</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.up</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">14px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-class">.info-text</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">28px</span>;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-class">.info-list</span> &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-class">.icon</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(../../images/icons.png) no-repeat top left;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">28px</span>;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-class">.icon-play</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: -<span class="number">659px</span> -<span class="number">210px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-class">.icon-danmu</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: -<span class="number">659px</span> -<span class="number">275px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-class">.icon-coins</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: -<span class="number">659px</span> -<span class="number">340px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图标也是用了B站本身的图标，通过<code>background-position</code>来控制显示图标。</p><p>最后成品：</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/weixin-bili-3.png" alt="http://7xokxd.com1.z0.glb.clouddn.com/weixin-bili-3.png"></p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>还可以些东西可以做</p><ul><li>分区排行榜</li><li>UP主信息</li><li>视频播放</li><li>视频评论</li></ul><h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><p>使用的B站的接口，都是抓包获取的，可能不怎么正规哈……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;最近微信小程序很火，于是趁机学了一下。然后做了个小的demo，实现了查看B站排行榜的功能。&lt;/p&gt;&lt;p&gt;项目地址 &lt;a href=&quot;http
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>再探CSS性能:选择器,膨胀且昂贵的样式</title>
    <link href="http://yoursite.com/2016/09/28/%E5%86%8D%E6%8E%A2CSS%E6%80%A7%E8%83%BD-%E9%80%89%E6%8B%A9%E5%99%A8-%E8%86%A8%E8%83%80%E4%B8%94%E6%98%82%E8%B4%B5%E7%9A%84%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/09/28/再探CSS性能-选择器-膨胀且昂贵的样式/</id>
    <published>2016-09-28T15:35:28.000Z</published>
    <updated>2018-03-19T13:24:18.544Z</updated>
    
    <content type="html"><![CDATA[<p>原文: <a href="https://benfrain.com/css-performance-revisited-selectors-bloat-expensive-styles/" target="_blank" rel="noopener">CSS performance revisited: selectors, bloat and expensive styles</a></p><p>什么是CSS？他们的瓶颈在哪里？选择器的快慢是否已经不再重要？我们用的CSS属性是不是远比选择器重要？我觉得这是再来看看这些问题的时候了。</p><blockquote><p>在大众的认知里，当优化网站速度的时候，CSS优化是无足轻重的。有很多其他更加简单的优化方式却能够带来更加卓越的性能优化。然而，如果这种微小的性能提升能运用到网页的各方面，那么最终将会带来巨大的变化。这样，用户都会感受优化。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文: &lt;a href=&quot;https://benfrain.com/css-performance-revisited-selectors-bloat-expensive-styles/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSS perform
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>2016宁JS小记</title>
    <link href="http://yoursite.com/2016/09/19/2016%E5%AE%81JS%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/09/19/2016宁JS小记/</id>
    <published>2016-09-19T14:44:59.000Z</published>
    <updated>2018-03-19T13:24:18.546Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww3.sinaimg.cn/crop.0.0.889.499.1000.562/005xa5uIgw1f6nmohw5xhj30p00dwmzc.jpg" alt="图挂了"></p><p>Day.1</p><h2 id="Vue-js-Evan-You"><a href="#Vue-js-Evan-You" class="headerlink" title="Vue.js - Evan You"></a>Vue.js - Evan You</h2><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/jsconfVue.jpg" alt=""></p><p>尤小右先是介绍了一下vue.js的历史，第一个commit是从2013年开始的。如今已经非常牛叉，即将发出2.0版本，只差文档了。然后讲了一下vue 2.0的特性，以及性能的优化，以及一些区别于1.x的地方。<br>然后就是聊了一下阿里的Weex，然后就宣布到Weex团队担任技术顾问了。<br>我觉得vue生态其实不错，vue + vuex + vue-router + Weex，这就类似于react + redux + react-router + React Native， 算是有对抗的力量。</p><h2 id="How-to-build-a-compiler-James-Kyle-Facebook"><a href="#How-to-build-a-compiler-James-Kyle-Facebook" class="headerlink" title="How to build a compiler - James Kyle@Facebook"></a>How to build a compiler - James Kyle@Facebook</h2><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/jsconfCompiler.jpg" alt=""></p><p>James Kyle是Bable的参与者，现在在Facebook工作。主要讲的是编译器的工作函数，主要流程。<br>tokenizer 关键字的识别处理<br>parse token 生成抽象的语法树<br>traverser<br>tansformer 我认为是将原来的语法书转换为算法能理解的语法树，也就是中缀变后缀的过程<br>code generator 生成对应的，计算器能理解的代码<br>compiler 包含上面几步，实现最终的编译器<br>然后实现了一个超小的编译器，能够转换算法表达式，中缀变后缀，实现算法解析。<br>他的tiny compiler在他的github上，地址 <a href="https://github.com/thejameskyle/the-super-tiny-compiler" target="_blank" rel="noopener">https://github.com/thejameskyle/the-super-tiny-compiler</a><br>整个slide做的也是非常辣眼睛，风格非常酷炫，讲代码的时候的动效很酷炫。</p><h2 id="Egg-天猪-Alibaba"><a href="#Egg-天猪-Alibaba" class="headerlink" title="Egg - 天猪@Alibaba"></a>Egg - 天猪@Alibaba</h2><p>主要是阿里的企业级node框架Egg，<a href="https://github.com/eggjs/egg" target="_blank" rel="noopener">https://github.com/eggjs/egg</a> 。<br>整个就像阿里的述职，然后据他称，egg框架有强大的生态，包括千计的插件。</p><h2 id="聊聊-JS-测试框架-严清-Teambition"><a href="#聊聊-JS-测试框架-严清-Teambition" class="headerlink" title="聊聊 JS 测试框架 - 严清@Teambition"></a>聊聊 JS 测试框架 - 严清@Teambition</h2><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/jsconfTest.jpg" alt=""></p><p>严老师上来就放了两个广告。<br>然后聊了一下测试框架的流派</p><ul><li>mocha流</li><li>jasmine</li><li>mocha</li><li>jest</li><li>tape流</li><li>tap</li><li>tape</li><li>ava</li></ul><p>然后讲了现阶段的各个JS测试框架，包括 Jasmine/Mocha/Tape/Ava 的优缺点。然后就介绍了T-Man的工作流程，原理。</p><h2 id="GridControl-Alexandre-Strzelewicz-keymitrics"><a href="#GridControl-Alexandre-Strzelewicz-keymitrics" class="headerlink" title="GridControl - Alexandre Strzelewicz@keymitrics"></a>GridControl - Alexandre Strzelewicz@keymitrics</h2><p>Alex 是PM2的作者，so cool。<br>然后这边主要是讲了服务器NODE程序的内存问题，包括之前的PM2和现在他的gridcontrol。<br>他现场演示了gridcontrol的工作方式，现场演示了一下。<br>Finally！他现场开源了这个新的项目，gridcontrol，现场将github的repo设置成了public，great！<br>我也去star了一个，非常激动。地址 <a href="https://github.com/gridcontrol/gridcontrol" target="_blank" rel="noopener">https://github.com/gridcontrol/gridcontrol</a></p><h2 id="3D-on-the-Web-罗诗亚-AutoDesk"><a href="#3D-on-the-Web-罗诗亚-AutoDesk" class="headerlink" title="3D on the Web - 罗诗亚@AutoDesk"></a>3D on the Web - 罗诗亚@AutoDesk</h2><p>讲师来自AutoDesk，开发了AutoCAD的公司，对3D建模有非常深的研究。<br>讲师先是讲了纯JS写一个3D模型。非常繁琐，几百行，画一个三角形。单纯地写3d大概包括一下几个流程</p><ul><li>vertex shader (code interactive)</li><li>primitive assembly</li><li>rasterization</li><li>fragment shader（code interactive）</li><li>freame buffer</li></ul><p>后来选择了用<code>Three.js</code>，very cool。<br>技术细节，包括用requestAnimationFrame来代替setTimeout，区别在于setTimeout有比较明显的性能问题。<br>顾奕灵表示你们不如看@羡澈 的Three的书。</p><h2 id="A-Frame-Building-Virtual-Reality-on-the-Web-Kevin-Ngo-Mozilla"><a href="#A-Frame-Building-Virtual-Reality-on-the-Web-Kevin-Ngo-Mozilla" class="headerlink" title="A-Frame, Building Virtual Reality on the Web - Kevin Ngo@Mozilla"></a>A-Frame, Building Virtual Reality on the Web - Kevin Ngo@Mozilla</h2><p>小哥有比较严重的口音。<br>聊了一下传统的VR技术以及现在的web VR技术。<br>讲了一下他们做的A框架，用来实现一个3D效果。<br>然后他们的A-Frame也是基于three.js包装的库，最终实现成为一个标签组件的形式，非常易用。详见 a-frame<br>然后做了几个demo展示，包括一个网页编辑3D的东西，非常cool。然后主要是实现了一个网页端的VR。</p><h2 id="Building-a-Unified-Frontend-and-Mobile-Team-郭达峰-sxl-cn"><a href="#Building-a-Unified-Frontend-and-Mobile-Team-郭达峰-sxl-cn" class="headerlink" title="Building a Unified Frontend and Mobile Team - 郭达峰@sxl.cn"></a>Building a Unified Frontend and Mobile Team - 郭达峰@sxl.cn</h2><p>主打React &amp; React Native，他们通过React Native打造了一个全端团队，通过JS来实现三端产品。<br>包括结合三端同学来完善整个团队，最好有一些native的开发经验。<br>我们可以预料到RN在未来的发展，包括BAT在内的企业已经对RN表现出浓厚兴趣。这必然是下一个技术增长点。<br>这算是一个比较完善的构造React Native团队的示例。</p><h2 id="Building-asynchronous-microservices-that-get-along-Makara-Wang-Wiredcraft"><a href="#Building-asynchronous-microservices-that-get-along-Makara-Wang-Wiredcraft" class="headerlink" title="Building asynchronous microservices that get along - Makara Wang@Wiredcraft"></a>Building asynchronous microservices that get along - Makara Wang@Wiredcraft</h2><p>这个没怎么听懂，主要讲了是</p><ul><li>微服务</li><li>微服务交互</li><li>消息中间件</li><li>Q &amp;A</li><li>很多人提问啊</li></ul><p>Day.2</p><h2 id="单页应用的联邦制-孙坤鹏-Ucloud"><a href="#单页应用的联邦制-孙坤鹏-Ucloud" class="headerlink" title="单页应用的联邦制 -孙坤鹏@Ucloud"></a>单页应用的联邦制 -孙坤鹏@Ucloud</h2><p>单页应用大了之后有各种缺点。希望能按模块发布并做出记录，</p><ul><li>集中制</li><li>两个队列齐步走</li><li>前端人肉支持两个版本</li><li>多租户– 不支持</li><li>解决：</li><li>单页面</li><li>多应用</li></ul><h2 id="前端DevOps实践-王龑-yan-oneAPM"><a href="#前端DevOps实践-王龑-yan-oneAPM" class="headerlink" title="前端DevOps实践 - 王龑(yan)@oneAPM"></a>前端DevOps实践 - 王龑(yan)@oneAPM</h2><p>感觉像是前端和运维的一些东西。没怎么听懂，感觉自己工程化的东西还是太弱。<br>搬运一下@顾轶灵 的记录</p><blockquote><p>也是带伤上场的……主要是持续集成、工程化管理的话题。讲的东西大的互联网公司里 CI 一般都有专门部门搞，提到的东西基本都有了而且更加完善一些，可能对小公司更有参考价值一些。最后介绍了一下 Sentry，小公司买个这种服务还挺好的，大公司一般倾向于自己做吧。类似的还有 Bugsnag，感觉差不多。要吐槽一下的是 PPT 做得也太不讲究了……</p></blockquote><h2 id="Node-js在线性能调优与故障排查-朴灵-Alibaba"><a href="#Node-js在线性能调优与故障排查-朴灵-Alibaba" class="headerlink" title="Node.js在线性能调优与故障排查 - 朴灵@Alibaba"></a>Node.js在线性能调优与故障排查 - 朴灵@Alibaba</h2><p>朴灵老师还是讲了他们alinode的一些机制，包括内存监控、服务管理、漏洞分析之类的。主要讲述的是，怎么解决一下三个问题：</p><ul><li>找 CPU 占用率瓶颈</li><li>内存泄露点</li><li>GC瓶颈</li></ul><p>朴灵老师还是现场演示了很多东西的，包括对应的三个demo，现场也演示了alinode的用法。但我对于这种完全安利的方式比较反感，加上第一天，阿里的几个分享都是以内部安利为主，就比较反感吧。<br>不过朴灵老师全程在膜，这很excited。</p><h2 id="Learning-design-patterns-from-modern-JavaScript-frameworks-Faser-Xu-Envato"><a href="#Learning-design-patterns-from-modern-JavaScript-frameworks-Faser-Xu-Envato" class="headerlink" title="Learning design patterns from modern JavaScript frameworks - Faser Xu@Envato"></a>Learning design patterns from modern JavaScript frameworks - Faser Xu@Envato</h2><p>这个比较神奇，很多bug<br>比如他讲到的设计模式，OO，jQuery的选择器。我们一脸懵逼，我还问彤彤，设计模式不应该是单例模式，观察者模式，工厂模式这些的吗？</p><h2 id="面向未来的自动化测试Macaca-徐达峰-Alipay"><a href="#面向未来的自动化测试Macaca-徐达峰-Alipay" class="headerlink" title="面向未来的自动化测试Macaca - 徐达峰@Alipay"></a>面向未来的自动化测试Macaca - 徐达峰@Alipay</h2><p>这里讲了一个叫Macaca的测试框架，是一个自动化的测试解决方案。非常一颗赛艇<br>本身是支付宝的新轮子，也是个开源的，地址<a href="https://github.com/alibaba/macaca" target="_blank" rel="noopener">https://github.com/alibaba/macaca</a><br>其实从严清老师和徐达峰老师讲到的东西，我个人学到的，大概就是测试的使用吧。<br>包括常见的Mocha和should之类的测试库，然后到严老师强推得toa和现在的Macaca。</p><h2 id="Managing-Async-with-RxJS-5-at-Netflix-Ben-Lesh-Netflix"><a href="#Managing-Async-with-RxJS-5-at-Netflix-Ben-Lesh-Netflix" class="headerlink" title="Managing Async with RxJS 5 at Netflix - Ben Lesh@Netflix"></a>Managing Async with RxJS 5 at Netflix - Ben Lesh@Netflix</h2><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/jsconfRxJS.jpg" alt=""></p><p>首先是异步编程的大坑。<br>异步嘛，用回调，callback hell，这个的坑就不说了。<br>然后就是Promise，这也是有坑的</p><ul><li>不能取消</li><li>单一类型</li></ul><p>然后就是讲到了ReactiveX JS，解决了Promise的问题，对于频繁的异步请求，广泛的数据处理，有独特的优势。<br>难怪龙神是RX脑残粉，连我这种没接触过的渣渣都对RX产生了极大的兴趣。<br>一定是要学一下的。<br>然而又80多种opration，可怕</p><h2 id="移动海量服务下基于React的高性能同构实践-梁伟盛-腾讯IMweb"><a href="#移动海量服务下基于React的高性能同构实践-梁伟盛-腾讯IMweb" class="headerlink" title="移动海量服务下基于React的高性能同构实践 - 梁伟盛@腾讯IMweb"></a>移动海量服务下基于React的高性能同构实践 - 梁伟盛@腾讯IMweb</h2><p>其实主要是讲了他们页面的一个优化过程，5s 到 1s。<br>页面首屏直出，其他使用异步加载<br>减少RTT<br>使用UDP，节省字节，去掉三次握手<br>不常变更的数据接入cache<br>也是一些比较常见的优化。<br>使用UDP我觉得还是和他们业务有关，视频直播，丢包影响不大。</p><h2 id="Build-a-Better-App-with-Mapbox-Peter-Liu-Mapbox"><a href="#Build-a-Better-App-with-Mapbox-Peter-Liu-Mapbox" class="headerlink" title="Build a Better App with Mapbox - Peter Liu@Mapbox"></a>Build a Better App with Mapbox - Peter Liu@Mapbox</h2><p>主要讲了……他们的产品，mapbox……<br>月用户量50W，大概和百度地图的……额……<br>不能因为是赞助商就这么搞事啊</p><h2 id="DevTools-for-the-Progressive-Web-Kenneth-Microsoft"><a href="#DevTools-for-the-Progressive-Web-Kenneth-Microsoft" class="headerlink" title="DevTools for the Progressive Web - Kenneth@Microsoft"></a>DevTools for the Progressive Web - Kenneth@Microsoft</h2><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/jsconfMicrosoft.jpg" alt=""></p><p>这位是个PM，听演讲，应该是负责了微软的Edge浏览器项目。<br>赞讲师，辗转两天的飞机终于到达会场，感谢！<br>主要讲的是，VSC里面，将控制台和浏览器分离开，可以进行直接的调试。<br>然后，Kenneth提了几个很有趣的问题：</p><ul><li>浏览器这么多，每个浏览器的DevTool都不同，为什么我每个都要学一遍？</li><li>为什么我要使用不同的DevTool来写代码和debugging?</li><li>为什么我的编辑器和浏览器不能结合的更加紧密一些，而是要反复切换？</li><li>为什么我的编辑器不能和无线设备连接起来开发呢？</li><li>为什么我们的DevTools还要和浏览器绑定在一起？</li></ul><p>巨硬给出的解决方案就是，把devtools集成到vsc里面，而不是在浏览器里面。<br>具体而言就是新开了一个端口，用socket的方式进行同步。<br>感觉比较像weinre。<br>我觉得比较有意思的是在VSC里面进行Hybrid页面的调试，这困扰我很久了。</p><h2 id="Using-nodejs-to-count-30-billion-requests-per-day-杜伟-Goyoo-Networks"><a href="#Using-nodejs-to-count-30-billion-requests-per-day-杜伟-Goyoo-Networks" class="headerlink" title="Using nodejs to count 30 billion requests per day - 杜伟@Goyoo Networks"></a>Using nodejs to count 30 billion requests per day - 杜伟@Goyoo Networks</h2><p>这位来自法国的小哥，全程用中文完成的演讲，超赞。<br>主要演示了他们的项目平台对数据的监控。<br>然后对数据进行挖掘。<br>总之我们知道了， it is awesome！</p><h2 id="Lighting-Talk"><a href="#Lighting-Talk" class="headerlink" title="Lighting Talk"></a>Lighting Talk</h2><h4 id="李寅侃同学得单口"><a href="#李寅侃同学得单口" class="headerlink" title="李寅侃同学得单口"></a>李寅侃同学得单口</h4><p>讲了一些很有趣的吐槽点，有些不太认同。</p><h4 id="how-to-write-babel-plugin-Hex"><a href="#how-to-write-babel-plugin-Hex" class="headerlink" title="how to write babel-plugin - Hex"></a>how to write babel-plugin - Hex</h4><ul><li>RTFM</li><li>generator</li><li>RTFSC</li></ul><p>贺老就是搞事情啊</p><h4 id="React-and-React-Navite-in-QQ-someone-腾讯Alloyteam"><a href="#React-and-React-Navite-in-QQ-someone-腾讯Alloyteam" class="headerlink" title="React and React Navite in QQ - someone@腾讯Alloyteam"></a>React and React Navite in QQ - someone@腾讯Alloyteam</h4><p>讲了React和RN在QQ里面的一些应用实践</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>我觉得前端技术实在发展太快，几年前，有讲师就在jsconf上分享react。如今react就已经蔚然成风，显然就是下一个趋势。<br>而今谁又能确认Macaca，RxJS，weex会不会成为再下一个发展趋势呢。<br>前端技术高速发展，相较于ios和安卓，我觉得FEer在努力谋求js生态圈的发展。<br>随着ES6、ES7的推出，js迎来的是更加灿烂的生态。<br>而今，react native和weex已经有着比较完整的生态，许多公司已经在线上大型产品里使用rn。因为rn的优势太太太明显了。一次开发多端编译，迅速的上线流程，区别于需要发版才能解决的bug，人力的减少，等等等等。<br>js之所以能有这样重要的发展，与FEer们的精神息息相关，在jsconf里，能看到大家这样的精神。<br>Thanks all~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/crop.0.0.889.499.1000.562/005xa5uIgw1f6nmohw5xhj30p00dwmzc.jpg&quot; alt=&quot;图挂了&quot;&gt;&lt;/p&gt;&lt;p&gt;Day.1&lt;/p&gt;&lt;h2 id=&quot;Vue-js-
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>手把手一个基于vue的博客</title>
    <link href="http://yoursite.com/2016/09/19/%E6%89%8B%E6%8A%8A%E6%89%8B%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Evue%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/09/19/手把手一个基于vue的博客/</id>
    <published>2016-09-19T14:44:23.000Z</published>
    <updated>2018-03-19T13:24:18.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这是一个基于vue的博客啦，然后还用到了vue-router、jQuery，使用webpack打包。后端的话，暂时还是准备基于php和mysql，毕竟也不复杂。<br>项目地址: <a href="https://github.com/congjiujiu/vue-blog" target="_blank" rel="noopener">https://github.com/congjiujiu/vue-blog</a><br>demo的话可以看 <a href="http://139.129.24.127/vueblog/index.html" target="_blank" rel="noopener">这里</a></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>基于vue+webpack，当然用vue-cli做脚手架<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装vue-cli</span><br><span class="line">cnpm install vue-cli -g</span><br><span class="line"></span><br><span class="line">// 初始化项目</span><br><span class="line">vue init webpack vueblog</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> vueblog</span><br><span class="line"></span><br><span class="line">// 安装依赖</span><br><span class="line">cnpm install</span><br><span class="line"></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p></p><p>然后就可以浏览器打开<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 查看项目了。</p><blockquote><p>cnpm比npm速度快很多，是淘宝的镜像，每10分钟更新一次，用cnpm装依赖的话跟飞一样~ 地址: <a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a></p></blockquote><blockquote><p>vue init webpack vueblog，这里的webpack是版本，vue-cli官网上还有别的几个不同版本，也可以自己fork到自己的repo，然后自定义，init的时候就可以从自己的repo初始化</p></blockquote><p>然后安装jQuery和vue-router</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install jquery vue-router --save-dev</span><br></pre></td></tr></table></figure><blockquote><p>装jQuery是方便呀，vue-router是路由管理，很好用啊</p></blockquote><h2 id="Home页面"><a href="#Home页面" class="headerlink" title="Home页面"></a>Home页面</h2><p>先初始化路由，在<code>main.js</code>里面加上下面的内容</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6的模块化引入vue-router</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由表</span></span><br><span class="line">router.map(&#123;</span><br><span class="line">    <span class="string">'/home'</span>: &#123;</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制跳转到/home</span></span><br><span class="line">router.redirect(&#123;</span><br><span class="line">    <span class="string">'*'</span>: <span class="string">'/home'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.start(App, <span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure><p>这样就在<code>#app</code>元素上，开启路由。因此就在<code>index.html</code>里面加上<code>#app</code> :</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>blog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="App-vue-主组件"><a href="#App-vue-主组件" class="headerlink" title="App.vue 主组件"></a>App.vue 主组件</h2><p>然后，在<code>App.vue</code>进行更改</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../static/img/logo.png"</span> <span class="attr">alt</span>=<span class="string">"logo"</span> <span class="attr">class</span>=<span class="string">'logo'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'home'</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"'/home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'blog'</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"'/blog'"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'link'</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"'/link'"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'about'</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"'/about'"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>vue-blog@congjiujiu  2016/08/14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>template里面的内容改成如上，logo是我在<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a> 上随便下载的图片，接下来是一个类似导航栏的列表，然后是route-view。<br>script里面关于hello的内容可以删掉，无所谓。<code>style</code>里面的样式建议全部删掉，不然很容易影响后面的样式。<br>然后自己写一点样式，如下</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">60px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Monaco, <span class="string">'Microsoft YaHei'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">6px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(135,135,135);</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(135, 135, 135);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就达到了如图的效果:</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/shot1.png" alt=""><br>看不到就算了</p><h2 id="Home-vue"><a href="#Home-vue" class="headerlink" title="Home.vue"></a>Home.vue</h2><p>Home组件就是在路由里面展示的组件<br>在<code>component</code>文件夹下面添加Home.vue文件，里面加入内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">'article in articles'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">blog</span>&gt;</span><span class="tag">&lt;/<span class="name">blog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>template 如上，这样访问/home的时候，就会展现这个模板。<br>这里引用了个子组件，用来进行多次的展示，所以在Home.vue里面需要写这样的js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Blog <span class="keyword">from</span> <span class="string">'./Blog.vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">     <span class="comment">// 造点假数据</span></span><br><span class="line">      <span class="keyword">var</span> articles = [];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">'articles'</span>: articles</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">      <span class="string">'blog'</span>: Blog</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此就会从articles里面取出数据生成文章展示。</p><h2 id="文章组件-Blog-vue"><a href="#文章组件-Blog-vue" class="headerlink" title="文章组件 Blog.vue"></a>文章组件 Blog.vue</h2><p>这个组件是用于在<code>Home.vue</code>里面，展示文章信息的组件<br>在component文件夹下面添加Blog.vue文件，里面加入内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template lang=&quot;html&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">        &lt;h2 id=&apos;title&apos;&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;more&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;like&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;img-wrap&quot;&gt;</span><br><span class="line">                    &lt;img v-if=&quot;like&quot; src=&quot;../../static/img/liked.png&quot; alt=&quot;liked&quot;/&gt;</span><br><span class="line">                    &lt;img v-else src=&quot;../../static/img/like.png&quot; alt=&quot;like&quot;/&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123;likeNumbers&#125;&#125; likes&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;time&quot;&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123;time&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>是一个展示模板，可以看到里面有很多绑定数据。因为是从父组件Home.vue生成，因此数据应该是从父组件传过来，这边使用props来传递数据：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">      id: &#123;</span><br><span class="line">          type: <span class="built_in">String</span>,</span><br><span class="line">          required: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      title: &#123;</span><br><span class="line">          type: <span class="built_in">String</span>,</span><br><span class="line">          required: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      content: &#123;</span><br><span class="line">          type: <span class="built_in">String</span>,</span><br><span class="line">          required: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      like: &#123;</span><br><span class="line">          type: <span class="built_in">Boolean</span>,</span><br><span class="line">          <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      likeNumbers: &#123;</span><br><span class="line">          type: <span class="built_in">String</span>,</span><br><span class="line">          <span class="keyword">default</span>: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      time: &#123;</span><br><span class="line">          type: <span class="built_in">String</span>,</span><br><span class="line">          required: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的字段有不同的配置，对应的属性有: type - 类型，可以是Number,String,Boolean等等，required - 是否必须，default - 默认值等<br>这样还需要从<code>Home.vue</code>进行更改，让数据能够透传过来，在Home.vue的template里面进行更改：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">'article in articles'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">blog</span> <span class="attr">:id</span>=<span class="string">"article.id"</span> <span class="attr">:title</span>=<span class="string">"article.title"</span> <span class="attr">:content</span>=<span class="string">"article.content"</span> <span class="attr">:time</span>=<span class="string">"article.time"</span> <span class="attr">:like-numbers</span>=<span class="string">"article.liked"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>blog组件内被传入了所需的参数，这样就可以了，打开<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，会自动跳转到<code>http://localhost:8080/#!/home</code>，也可以看到我们刚刚添加的内容了<br>看不到就算啦=￣ω￣=</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/example.png" alt=""></p><h2 id="内容展示-article-vue"><a href="#内容展示-article-vue" class="headerlink" title="内容展示 article.vue"></a>内容展示 article.vue</h2><p>新增加Article.vue组件，因为涉及到路由跳转，因此在<code>main.js</code>里面新建路由：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Article <span class="keyword">from</span> <span class="string">'./components/Article.vue'</span>;</span><br><span class="line"></span><br><span class="line">router.map(&#123;</span><br><span class="line">    <span class="string">'/home'</span>: &#123;</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'/article'</span>: &#123;</span><br><span class="line">        component: Article</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就能通过<code>vue-router</code>进行路由控制了<br>通过在/home里面点击文章来进入具体的文章展示页面，在ready()里面加上监听事件，因为要做事件委托所以没有直接加@click。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">$(<span class="string">'.wrapper'</span>).unbind();</span><br><span class="line">$(<span class="string">'.wrapper'</span>).bind(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.target.nodeName.toUpperCase() ===<span class="string">'IMG'</span>&#123;            </span><br><span class="line">        self.toggleLike(e.target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        self.showArticle(self.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>防止多次绑定，加上<code>unbind</code>，不然实现个单例也是可以的。<code>toggleLike(node)</code> 函数用来切换点赞的心的颜色。<br>通过<code>showArticle(id)</code>函数，切换路由到具体文章的展示路径</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">showArticle (id) &#123;</span><br><span class="line">     <span class="keyword">this</span>.$route.go(&#123;<span class="attr">path</span>:<span class="string">'/article'</span>, <span class="attr">query</span>:&#123;<span class="attr">id</span>: id&#125;&#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里是vue-router的一个方法，跳转到一个路径，query为后面添加的参数，譬如这边，{id:id}，那么展现到url上就会是host/!#/article?id=1，这样。然后在新的视图里面，也可以通过$route.query.id获取到数值。<br>在Article.vue添加内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        &#123;&#123;content&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> mockContent = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">          content: mockContent</span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  computed: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  ready() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (localStorage.getItem(self.$route.query.id)) &#123;</span></span><br><span class="line"><span class="undefined">          self.content = localStorage.getItem(self.$route.query.id);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">              type: <span class="string">'GET'</span>,</span></span><br><span class="line"><span class="javascript">              url: <span class="built_in">window</span>.sSession.server + <span class="string">'getArticles.php'</span></span></span><br><span class="line"><span class="javascript">          &#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> sdate = self.articles = <span class="built_in">JSON</span>.parse(date);</span></span><br><span class="line"><span class="undefined">              self.content = sdate[self.id];</span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  attached() &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">  components: &#123;&#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果<code>localStorage</code>， 直接从<code>localStorage</code>里面取内容。如果没有的话，再向后端请求数据，用于用户直接通过url访问文章。<br>这边可以优化接口，毕竟请求一篇文章的内容还要传送所有内容，太过庞大。<br>作为 // todo<br>数据<br>后端程序就不放了，数据表也不放了，就是个简单的查询<br>在<code>Home.vue</code>里面，添加异步请求</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">      <span class="keyword">var</span> articles = [];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">'articles'</span>: articles</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  ready() &#123;</span><br><span class="line">      $(<span class="string">'.banner .home&gt;a'</span>).css(<span class="string">'color'</span>, <span class="string">'#000'</span>);</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">          type: <span class="string">'GET'</span>,</span><br><span class="line">          url: <span class="built_in">window</span>.sSession.server + <span class="string">'getArticles.php'</span></span><br><span class="line">      &#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> sdate = self.articles = <span class="built_in">JSON</span>.parse(date);</span><br><span class="line">          sdate.map(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">              localStorage.setItem(v.id, v.content);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ready()函数，是组件的生命周期函数，当组件ready的时候会执行，然后在里面跑一个AJAX，从远程的服务器上取数据，这边我填的服务器是我自己的，放到一个全局变量里面，方便使用。然后考虑到文章内容可能会比较大，不要请求两次了就，因此把文章内容缓存到localStorage里面，点开具体文章的时候，直接从localStorage里面取。<br>兼容性方面，我还没想好，暂时有两个解决方案，No.1，搞一个隐藏的textarea元素，把内容放在里面。No.2，弹个窗，告诉用户你的浏览器版本太旧了，然后页面重定向到chrome的下载地址。</p><h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install marked --save-dev</span><br></pre></td></tr></table></figure><p>安装<code>marked.js</code><br>然后在Home.vue里面添加一下js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> marked <span class="keyword">from</span> <span class="string">'marked'</span>;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">'GET'</span>,</span><br><span class="line">  url: <span class="built_in">window</span>.sSession.server + <span class="string">'getArticles.php'</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">  self.articles = <span class="built_in">JSON</span>.parse(date);</span><br><span class="line">  self.articles.map(<span class="function"><span class="keyword">function</span> (<span class="params">article</span>) </span>&#123;</span><br><span class="line">     article.content = marked(article.content);</span><br><span class="line">     localStorage.setItem(article.id, article.content);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就可以了，从后台取过来的markdown数据就可以转换为html的dom，通过vue的数据绑定插入到文档中去。<br>同时对后台程序进行部分调整，将从数据库中取内容变为从markdown文件内读取。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$filePath = <span class="string">'../posts/'</span> . $res[<span class="string">'id'</span>] . <span class="string">'.md'</span>;</span><br><span class="line">$file = fopen($filePath, <span class="string">"r"</span>);</span><br><span class="line">$content = fread($file, filesize($filePath));</span><br></pre></td></tr></table></figure><p>传入一些markdown文件进行测试，并在Article.vue里面加行css，使文章居中，效果如下<br>看不到就不太好啦</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/shot2.png" alt=""></p><p>这样并没有什么样式，代码也没高亮，引用模块也没样式。可以自己加上css来达成，代码高亮可以使用<code>highlight.js</code>来实现</p><blockquote><p>更新，我不用highlight.js了，引不进去。</p></blockquote><p>在Article.vue里面更新如下的css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#566b78</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> <span class="selector-tag">pre</span>, <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f5f7f9</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#d8dee9</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a7adba</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#69c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: text-bottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e81c4f</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以变得很好看了！高亮再说吧！<br>效果如图</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/shot3.png" alt=""></p><p>很好看啊</p><h2 id="小功能"><a href="#小功能" class="headerlink" title="小功能"></a>小功能</h2><p>有些小功能可以做起来</p><h4 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h4><p>也就是文章列表左下角的爱心，点击变红，表示点赞<br>可以在Blog.vue的ready()函数内绑定事件，然后切换图片，把之后的点赞数据+1，然后update到后台数据库</p><h4 id="logo旁边闪现名称"><a href="#logo旁边闪现名称" class="headerlink" title="logo旁边闪现名称"></a>logo旁边闪现名称</h4><p>在主页的时候，显示自己博客的名称。切换到文章的时候，出现文章题目。<br>所以需要数据透传，想了一下还是没上vuex，等我不行了就上吧。<br>由于需要多个组件互相通信，因此使用了$dispatch和$broadcast进行配合，不得不说这俩用起来果然够乱，还是忍住了没上vuex。<br>在App.vue最上层组件里增加监听：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">events: &#123;</span><br><span class="line">    <span class="string">'home'</span> () &#123;</span><br><span class="line">        <span class="keyword">this</span>.$broadcast(<span class="string">'show-mine'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'article'</span> (title) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$broadcast(<span class="string">'show-title'</span>, title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当有子组件dispatch这两个的时候，就会进行透传了。<br>在Home.vue里面增加对home的触发</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$dispatch(<span class="string">'home'</span>);</span><br></pre></td></tr></table></figure><p>在Article.vue里面增加对article的触发</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$dispatch(<span class="string">'article'</span>, title);</span><br></pre></td></tr></table></figure><p>然后将之前的App.vue里面的关于banner的代码摘出来，放到新的组件里面，叫做Banner.vue，然后在App.vue里面进行引用。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">import</span> Banner <span class="keyword">from</span> <span class="string">'./components/Banner.vue'</span>;</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">    banner: Banner</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是Banner.vue里面的</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../static/img/logo.png"</span> <span class="attr">alt</span>=<span class="string">"logo"</span> <span class="attr">class</span>=<span class="string">'logo'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            &#123;&#123;title&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'home'</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"'/home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'blog'</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"'/blog'"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'link'</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"'/link'"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'about'</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"'/about'"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> mockTitle = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">            title: mockTitle</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    computed: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">    ready() &#123;&#125;,</span></span><br><span class="line"><span class="undefined">    attached() &#123;&#125;,</span></span><br><span class="line"><span class="undefined">    events: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">'show-mine'</span> () &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">            self.title = <span class="string">'Nighting'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="string">'show-title'</span> (stitle) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="undefined">            self.title = stitle;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;&#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分别在mine和title的情况下进行标题的展示。<br>ok了，然后可以加点动画和样式</p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/shot4.png" alt=""></p><p><img src="http://7xokxd.com1.z0.glb.clouddn.com/shot5.png" alt=""></p><p>很好看啊<br>还好啦</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li><s>markdown 转换功能 ： marked.js 开源插件</s></li><li>用户注册 ： 链接用户表</li><li>用户评论 ： 富文本编辑器 or markdown编辑器</li><li>在线编辑文章 ： markdown编辑器</li><li>highlight.js弄不上，感觉有问题。再搞一个或者自己写一个</li><li>点击数，可做统计</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;这是一个基于vue的博客啦，然后还用到了vue-router、jQuery，使用webpack打包。后端的话，暂时还是准备基于php和mys
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>date的锅我来背</title>
    <link href="http://yoursite.com/2016/09/19/date%E7%9A%84%E9%94%85%E6%88%91%E6%9D%A5%E8%83%8C/"/>
    <id>http://yoursite.com/2016/09/19/date的锅我来背/</id>
    <published>2016-09-19T14:43:40.000Z</published>
    <updated>2018-03-19T13:24:18.539Z</updated>
    
    <content type="html"><![CDATA[<p>前些天用到了js中原生的date对象，发现还是有一堆神奇的坑在里面。</p><h2 id="创建date对象"><a href="#创建date对象" class="headerlink" title="创建date对象"></a>创建date对象</h2><h3 id="最简单的创建方式"><a href="#最简单的创建方式" class="headerlink" title="最简单的创建方式"></a>最简单的创建方式</h3><p>正常也即使用<code>new Date()</code>的方式创建，返回的是一个对象，里面包含现在的时间：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tue Aug 02 2016 15:52:56 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure><p>从前向后看一下，Tue就是<code>Tuesday</code>-星期二，Aug就是八月，后面很好理解，<code>GMT</code>指格林威治标准时间，+800指的是+8时区，也同时为长者续了8秒。CST 就是+8时区的，表示北京时间，wiki上也说表示美国中部时间。</p><h3 id="传入参数的创建"><a href="#传入参数的创建" class="headerlink" title="传入参数的创建"></a>传入参数的创建</h3><p>MDN上总共给了三种带参数的创建方式，一一看来：</p><h4 id="1-value"><a href="#1-value" class="headerlink" title="1 value"></a>1 value</h4><p><code>new Date(value);</code> 方式创建，value要求是一个时间戳数字。时间戳即从1970-1-1 00:00:00以来，至今所经过的毫秒数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1470124843431</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tue Aug 02 2016 16:00:43 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure><p>不能使用字符串，否则是变成Invalide Date</p><h4 id="2-dateString"><a href="#2-dateString" class="headerlink" title="2 dateString"></a>2 dateString</h4><p><code>new Date(dateString);</code> 方式，dateString 参数必须是一个标准时间格式的字符串，可以通过<code>date.parse()</code>方法来验证是否是一个标准格式，如果是，那么可以得到对应的时间戳</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016'</span>); <span class="comment">// Fri Jan 01 2016 08:00:00 GMT+0800 (CST)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016-08'</span>); <span class="comment">// Mon Aug 01 2016 08:00:00 GMT+0800 (CST)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016-08-01'</span>); <span class="comment">// Mon Aug 01 2016 08:00:00 GMT+0800 (CST)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016-08-01 13'</span>); <span class="comment">// Invalid Date</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016-08-01 13:27'</span>); <span class="comment">// Mon Aug 01 2016 13:27:00 GMT+0800 (CST)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016-08-01 13:27:22'</span>); <span class="comment">// Mon Aug 01 2016 13:27:22 GMT+0800 (CST)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'13:27:22'</span>); <span class="comment">// Invalid Date</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'13:27'</span>); <span class="comment">// Invalid Date</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'13'</span>); <span class="comment">// Invalid Date</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016 13:27:22'</span>); <span class="comment">// Fri Jan 01 2016 13:27:22 GMT+0800 (CST)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016-08 13:27:22'</span>); <span class="comment">// Mon Aug 01 2016 13:27:22 GMT+0800 (CST)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016-08-01 13:27:22'</span>); <span class="comment">// Mon Aug 01 2016 13:27:22 GMT+0800 (CST)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016 13:27'</span>); <span class="comment">// Fri Jan 01 2016 13:27:00 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure><p>大概可以看出，是有自动补全规则的，年月日-时分秒中，月日秒都可以自动补全。但是年份和小时不能缺少，不然那就会invalid date<br>但是，这只是在chrome下的测试，如果将这些样例放到手机端的浏览器上，或者电脑上的safari等浏览器下，那么将会全部invalid<br>解决方案就是，在中间加一个T，如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016-04-20T14:22:11'</span>); <span class="comment">// Wed Apr 20 2016 22:22:11 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure><p>在所有浏览器上均可<br>但是又带来一个问题，搞出来的时间不对呀，我输入的明明是下午两点，怎么出来就变成晚上十点了？excuse me？<br>黑人问号脸<br>然后发现是时区的问题，最终显示的是+8时区的，构造函数会认为我们输入的是标准标准时间，自动给我们+8<br>解决方案是，在后面再加上+08:00，像函数表示，我已经续过了！</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016-04-20T14:22:11+08:00'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wed Apr 20 2016 14:22:11 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure><p>顺利使用，跨平台完成</p><h4 id="3-year-month-…"><a href="#3-year-month-…" class="headerlink" title="3 year, month …"></a>3 year, month …</h4><p><code>new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]])</code>， 一堆可选参数</p><ul><li>year 必要 年份</li><li>month 必要 月份</li><li>day 非必要 日期</li><li>hour 非必要 小时</li><li>minutes 非必要 分钟</li><li>seconds 非必要 秒数</li><li>milliseconds 非必要 秒数</li></ul><p>这也是一个比较正常能够使用的创建方式，各个浏览器上也都能使用<br>这里所有参数必须都是整数型哦</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>, <span class="number">04</span>, <span class="number">20</span>, <span class="number">14</span>, <span class="number">22</span>, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fri May 20 2016 14:22:11 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure><p>真棒~<br>咦，哪里不对，星期和月份好像不对啊。。。<br>excuse me too?<br>黑人问号脸<br>实际上，date对象里面，月份是从0开始数的…… 所以把正确月份减个1再传进去。。。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">14</span>, <span class="number">22</span>, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wed Apr 20 2016 14:22:11 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure><p>这就对了<br>同样需要注意的是，<code>getMonth()</code>方法，返回的月份也是从1开始的，使用的时候需要手动+1哦，又续一秒</p><h2 id="一些神奇的方法"><a href="#一些神奇的方法" class="headerlink" title="一些神奇的方法"></a>一些神奇的方法</h2><h3 id="getDay"><a href="#getDay" class="headerlink" title="getDay()"></a>getDay()</h3><p>返回的是星期几，不是具体哪一天~ getDate()才是返回日期</p><h3 id="getYear"><a href="#getYear" class="headerlink" title="getYear()"></a>getYear()</h3><p>返回的是从1900年至今年所经过的年数，也就是今年的年份减掉1900。这个方法已经被飞起，但是chrome仍然支持该方法，所以不要用错了。获取真实年份的方法应该是getFullYear()</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// Tue Aug 02 2016 16:47:23 GMT+0800 (CST)</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getYear()); <span class="comment">// 116</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getFullYear()); <span class="comment">// 2016</span></span><br></pre></td></tr></table></figure><h3 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth()"></a>getMonth()</h3><p>返回的是当前月份-1，使用的时候应该要加上1</p><h3 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a>getTime()</h3><p>获取该时间对象的时间戳，使用 + 能达到同样的效果</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// Tue Aug 02 2016 16:47:23 GMT+0800 (CST)</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getTime()); <span class="comment">// 1470127643715</span></span><br><span class="line"><span class="built_in">console</span>.log(+now); <span class="comment">// 1470127643715</span></span><br></pre></td></tr></table></figure><h2 id="Invalid-Date"><a href="#Invalid-Date" class="headerlink" title="Invalid Date"></a>Invalid Date</h2><p>当初始化的时候，输入不正确的格式的时候，会产生一个invalid date，但这仍然是一个对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nd = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'k15'</span>);</span><br><span class="line"><span class="keyword">typeof</span> nd; <span class="comment">// object</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前些天用到了js中原生的date对象，发现还是有一堆神奇的坑在里面。&lt;/p&gt;&lt;h2 id=&quot;创建date对象&quot;&gt;&lt;a href=&quot;#创建date对象&quot; class=&quot;headerlink&quot; title=&quot;创建date对象&quot;&gt;&lt;/a&gt;创建date对象&lt;/h2&gt;&lt;h3 id=&quot;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>暑期实习面经-百度</title>
    <link href="http://yoursite.com/2016/09/19/%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F-%E7%99%BE%E5%BA%A6/"/>
    <id>http://yoursite.com/2016/09/19/暑期实习面经-百度/</id>
    <published>2016-09-19T14:43:03.000Z</published>
    <updated>2018-03-19T13:24:18.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="百度一面"><a href="#百度一面" class="headerlink" title="百度一面"></a>百度一面</h2><p>目测是挂了，伐开心，不过还是记录一下吧</p><h4 id="image中的alt和title分别是干嘛用的？"><a href="#image中的alt和title分别是干嘛用的？" class="headerlink" title="image中的alt和title分别是干嘛用的？"></a>image中的alt和title分别是干嘛用的？</h4><blockquote><p>alt：图片不能显示的时候，提示出的文字<br>title：鼠标hover在图片上的时候，右上角会出现的小提示</p></blockquote><h4 id="在form中上传文件，但是不能刷新页面，该怎么做？"><a href="#在form中上传文件，但是不能刷新页面，该怎么做？" class="headerlink" title="在form中上传文件，但是不能刷新页面，该怎么做？"></a>在form中上传文件，但是不能刷新页面，该怎么做？</h4><blockquote><p>ajax</p></blockquote><p>面试官大人说：</p><blockquote><p>ajax不能适配低版本的浏览器，有没有其他方法？</p></blockquote><p>我瞬间就懵逼了，表示不知道，然后面试官说：</p><blockquote><p>可以在form的target属性里面指定一个iframe，然后设定不显示，刷新iframe的话就可以不刷新页面了</p></blockquote><h4 id="image标签的src值设置为空的时候，页面会发生什么？"><a href="#image标签的src值设置为空的时候，页面会发生什么？" class="headerlink" title="image标签的src值设置为空的时候，页面会发生什么？"></a>image标签的src值设置为空的时候，页面会发生什么？</h4><blockquote><p>我：如果没设定image的width和height，后面的元素会向前挤压image的空间<br>面试官：别往布局方面考虑<br>我：那浏览器不会下载该图片，因为没有src值<br>面试官：会下载的，会将他所在的页面下载两次，加大了浏览器负载</p></blockquote><p>。。。这个真的不知道</p><h4 id="说一下CSS属性的优先级吧"><a href="#说一下CSS属性的优先级吧" class="headerlink" title="说一下CSS属性的优先级吧"></a>说一下CSS属性的优先级吧</h4><blockquote><p>!important &gt; id &gt; class &gt; tagName</p></blockquote><p>面试官问： 那内联样式在哪里？</p><blockquote><p>低于 !important，但是是引用样式中优先级最高的</p></blockquote><p>实际上正确的是这样的：</p><blockquote><p>!important &gt; 内联 &gt; ID &gt; 伪类 &gt; 属性选择 &gt; class &gt; tag &gt; *</p></blockquote><h4 id="伪类和伪元素有哪些，区别是什么？"><a href="#伪类和伪元素有哪些，区别是什么？" class="headerlink" title="伪类和伪元素有哪些，区别是什么？"></a>伪类和伪元素有哪些，区别是什么？</h4><blockquote><p>伪元素有 :first-letter，:before， :after<br>伪类有 :hover，:active<br>伪元素表示一个不存在的元素，但是可以对某个位置进行CSS操作<br>伪类表示添加一个类吧</p></blockquote><p>对伪元素和伪类的描述是不对的。</p><blockquote><p>伪元素用于将特殊的效果添加到某些选择器<br>伪类用于向某些选择器添加特殊的效果</p></blockquote><h4 id="CSS-hack"><a href="#CSS-hack" class="headerlink" title="CSS hack"></a>CSS hack</h4><blockquote><p>对不同的浏览器写不同的CSS</p></blockquote><h4 id="call和apply-都是干嘛的，有什么区别？"><a href="#call和apply-都是干嘛的，有什么区别？" class="headerlink" title="call和apply 都是干嘛的，有什么区别？"></a>call和apply 都是干嘛的，有什么区别？</h4><blockquote><p>用于改变函数的上下文，也就是this的范围。<br>call传入的是一个参数列表，很多个参数<br>apply传入的是一个参数的数组</p></blockquote><h4 id="setTimeout和setInterval"><a href="#setTimeout和setInterval" class="headerlink" title="setTimeout和setInterval"></a>setTimeout和setInterval</h4><blockquote><p>setTimeout只执行一次<br>setInterval每过参数秒就执行一次</p></blockquote><p>面试官：都可以用来做定时器吗？</p><blockquote><p>可以的</p></blockquote><p>面试官：setInterval怎么做？</p><blockquote><p>可以嵌套</p></blockquote><p>面试官：那setTimeout和setInterval在具体执行起来，表现上有什么区别吗？</p><blockquote><p>不知道。。。</p></blockquote><p>这个真不知道</p><h4 id="document-onload和window-onready什么区别"><a href="#document-onload和window-onready什么区别" class="headerlink" title="document.onload和window.onready什么区别"></a>document.onload和window.onready什么区别</h4><blockquote><p>这个我也不知道，我只知道document.onload是在页面加载完之后，具体是在什么阶段我真不知道。<br>window.onload必须等到页面内包括图片的所有元素加载完毕后才能执行。<br>$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</p></blockquote><h4 id="JS中继承有哪些方式"><a href="#JS中继承有哪些方式" class="headerlink" title="JS中继承有哪些方式"></a>JS中继承有哪些方式</h4><blockquote><p>可以使用prototype设定<br>或者使用Object.create<br>或者使用new 来创建一个对象</p></blockquote><p>那function a();要继承function b()该怎么做</p><blockquote><p><code>a.prototype = b;</code></p></blockquote><p>实际上是错的，因为b是一个函数，这么写a是无法访问到b的内部属性的，正确的写法应该是：</p><blockquote><p><code>a.prototype = b.prototype;</code></p></blockquote><h4 id="说说跨域"><a href="#说说跨域" class="headerlink" title="说说跨域"></a>说说跨域</h4><blockquote><p>比如有 jsonp，CORS, document.domin, window.name, window.postMessage</p></blockquote><p>面试官：具体比如CORS是怎么做的？</p><blockquote><p>通过设置Access-Control-Allow-Origin来实现</p></blockquote><p>面试官：具体在哪里设置？</p><blockquote><p>不知道 （实际应该在服务器端）</p></blockquote><h4 id="知道的状态码"><a href="#知道的状态码" class="headerlink" title="知道的状态码"></a>知道的状态码</h4><blockquote><p>1xx, 2xx, 3xx, 4xx, 5xx都有<br>具体比如 200， 302， 304 ，404， 502</p></blockquote><p>面试官：至少每个都解释一下啊（囧</p><blockquote><p>200： OK<br>302： Moved Permenately（误<br>304：缓存相关的<br>404：Not Found<br>502：sorry我记不起来了<br>实际上302和304解释的都不好<br>302：found，表示请求的页面临时从别的URI请求过来。<br>301：Moved Permanently<br>304：Not Modified, 表示与上次的请求内容一致，未发生变化。确实与缓存有关<br>502：Bad Gateway, 网关错误</p></blockquote><h4 id="平时自己做过页面的缓存吗"><a href="#平时自己做过页面的缓存吗" class="headerlink" title="平时自己做过页面的缓存吗"></a>平时自己做过页面的缓存吗</h4><blockquote><p>没做过，但我知道页面缓存的几种方式<br>ETag，cache-control等</p></blockquote><p>面试官：说说详细的过程</p><blockquote><p>比如ETag:<br>当发送一个服务器请求时，浏览器首先会进行缓存过期判断。浏览器根据缓存过期时间判断缓存文件是否过期。<br>情景一：若没有过期，则不向服务器发送请求，直接使用缓存中的结果，此时我们在浏览器控制台中可以看到 200 OK (from cache) ，此时的情况就是完全使用缓存，浏览器和服务器没有任何交互的。<br>情景二：若已过期，则向服务器发送请求，此时请求中会带上①中设置的文件修改时间，和 Etag<br>然后，进行资源更新判断。服务器根据浏览器传过来的文件修改时间，判断自浏览器上一次请求之后，文件是不是没有被修改过；根据 Etag ，判断文件内容自上一次请求之后，有没有发生变化<br>情形一：若两种判断的结论都是文件没有被修改过，则服务器就不给浏览器发 index.html 的内容了，直接告诉它，文件没有被修改过，你用你那边的缓存吧—— 304 Not Modified ，此时浏览器就会从本地缓存中获取 index.html 的内容。此时的情况叫协议缓存，浏览器和服务器之间有一次请求交互。<br>情形二：若修改时间和文件内容判断有任意一个没有通过，则服务器会受理此次请求，之后的操作同①</p></blockquote><p>那版本迭代的时候怎么办？不能我们更新了用户还是原来的版本啊<br>（懵逼状<br>表示不知道，我猜可能是和页面的有效时间有关吧。<br>可能涉及到Expire吧<br>（不懂装懂中</p><h4 id="POST和GET的区别"><a href="#POST和GET的区别" class="headerlink" title="POST和GET的区别"></a>POST和GET的区别</h4><blockquote><p>GET是向浏览器请求数据，POST是修改数据<br>GET请求的时候会在URL中带上地址和参数之类的<br>POST比GET更安全<br>POST发送的数据没有大小限制，但是GET有</p></blockquote><p>GET的数据限制多大？</p><blockquote><p>不懂。。。<br>其实是<br>1024字节</p></blockquote><h4 id="知道XSS吗"><a href="#知道XSS吗" class="headerlink" title="知道XSS吗"></a>知道XSS吗</h4><blockquote><p>跨域攻击</p></blockquote><p>面试官：哈？</p><blockquote><p>是在页面中恶意插入script，引诱用户点击，以获取用户的信息。</p></blockquote><p>面试官：哦。。。</p><h4 id="你放项目的这个服务器是自己电脑吗？"><a href="#你放项目的这个服务器是自己电脑吗？" class="headerlink" title="你放项目的这个服务器是自己电脑吗？"></a>你放项目的这个服务器是自己电脑吗？</h4><blockquote><p>买的阿里云</p></blockquote><p>上面的服务是自带的吗？</p><blockquote><p>不是，是自己搭的</p></blockquote><p>是apache?</p><blockquote><p>嗯</p></blockquote><p>知不知道其他的服务器？</p><blockquote><p>我知道的有tomcat，nginx</p></blockquote><p>为什么不用nginx？</p><blockquote><p>没实际使用经验</p></blockquote><p>好吧。。那你自己是怎么连到服务器上的？</p><blockquote><p>ssh</p></blockquote><p>怎么上传/下载文件？</p><blockquote><p>ftp</p></blockquote><h4 id="BFS和DFS"><a href="#BFS和DFS" class="headerlink" title="BFS和DFS"></a>BFS和DFS</h4><blockquote><p>BFS是一层一层搜索<br>DFS是深入搜索每个分支，一直到底层再返回上一层继续搜索</p></blockquote><p>从迷宫的入口，找到出口该用什么？</p><blockquote><p>唔、、、我觉得可以用Dijkstra</p></blockquote><p>哈？不用这么麻烦吧</p><blockquote><p>那可以用DFS吧</p></blockquote><p>其实用BFS更好一些，一层一层搜索，很容易就能找到路径</p><h4 id="有什么要问我的吗？"><a href="#有什么要问我的吗？" class="headerlink" title="有什么要问我的吗？"></a>有什么要问我的吗？</h4><p>………………迷之沉默</p><p>那今天就这样吧！</p><p>感觉面的并不怎么样，很多都不会。哎，实习期的第一次面试就这么跪了。。。<br>不过还是写下来以学习吧！</p><h2 id="百度二面"><a href="#百度二面" class="headerlink" title="百度二面"></a>百度二面</h2><p>万万没想到，二面来的这么猝不及防。。。<br>在上毛概的时候就来电话了，所以跑出来面试，虽然目测肯定是挂了，但是我确实看到了自己短板的地方。</p><h4 id="看过的书有哪些"><a href="#看过的书有哪些" class="headerlink" title="看过的书有哪些"></a>看过的书有哪些</h4><blockquote><p>JavaScript 权威指南<br>JavaScript 高级程序设计<br>最近在看<br>JavaScript 语言精粹<br>你不知道的JS</p></blockquote><blockquote><p>下面就基本都是计网方面的问题了。。。<br>心累的一塌糊涂，我太渣了以至于基本一题都没答出来，一路都是相当的茫然。<br>于是发现自己网络方面简直若得可怜。那本HTTP权威指南弄回来后就放着生灰了，果然还是得看啊。</p></blockquote><h4 id="七层网络协议说一下"><a href="#七层网络协议说一下" class="headerlink" title="七层网络协议说一下"></a>七层网络协议说一下</h4><blockquote><p>这个实在不怎么记得，断断续续说了下面几个<br>物理层，数据链路层，传输层，表示层，应用层</p></blockquote><p>然后面试官提醒了一下，又想出了一个网络层。。。</p><blockquote><p>实际上七层协议从上到下应该是：<br>应用层：包括HTTP,FTP,SMTP等协议，对应应用程序的通信服务<br>表示层：包括加密,ASCII等，定义数据格式及加密<br>会话层：包括RPC,SQL等，定义如何开始、控制、结束一个对话<br>传输层：包括TCP,UDP等，选择协议，对数据流进行复用，对数据包排序<br>网络层：包括IP协议等，端对端的包传输<br>链路层：包括ATM,FDDI等，主要定义如何在一个链路上进行数据传输<br>物理层：包括RJ45,802.3等标准，主要是有关传输介质的标准</p></blockquote><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><blockquote><p>用TCP协议把数据包送出去后， TCP 不会对传送 后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP的标志： SYN 和 ACK 。<br>发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。 最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。 若在握手过程中某个阶段莫名中断， TCP 协议会再次以相同的顺序发送相同的数据包。</p></blockquote><h4 id="像迅雷那样的下载软件，是怎么实现限速下载的功能的？"><a href="#像迅雷那样的下载软件，是怎么实现限速下载的功能的？" class="headerlink" title="像迅雷那样的下载软件，是怎么实现限速下载的功能的？"></a>像迅雷那样的下载软件，是怎么实现限速下载的功能的？</h4><p>我不会，思考了一下：</p><blockquote><p>大量下载其他无关的文件？</p></blockquote><p>肯定是不对的</p><p>经过面试官的指点，大概是：</p><blockquote><p>控制单位时间内接收的数据包的数量，从而限制单位时间内获取的数据大小</p></blockquote><h4 id="端口，有什么作用？"><a href="#端口，有什么作用？" class="headerlink" title="端口，有什么作用？"></a>端口，有什么作用？</h4><blockquote><p>唯一标识程序与外部网络的接口，从而能够从大量流量中区分出对应的信息</p></blockquote><p>我大概是这么个意思，后来查了一下，发现这样的说法：</p><blockquote><p>端口号的作用，主要是区分服务类别和在同一时间进行多个会话。</p></blockquote><h4 id="代理服务器，内部的机器的IP可能是192-168-x-x，那么这样的一个机器与外界交互的过程是什么？"><a href="#代理服务器，内部的机器的IP可能是192-168-x-x，那么这样的一个机器与外界交互的过程是什么？" class="headerlink" title="代理服务器，内部的机器的IP可能是192.168.x.x，那么这样的一个机器与外界交互的过程是什么？"></a>代理服务器，内部的机器的IP可能是192.168.x.x，那么这样的一个机器与外界交互的过程是什么？</h4><blockquote><p>首先将请求传送到网关，网关将IP转换到公网IP，然后向服务器发送请求，网关获得结果后，再传送到具体的机器上。</p></blockquote><h4 id="网关是怎么区分内网不同的机器的？"><a href="#网关是怎么区分内网不同的机器的？" class="headerlink" title="网关是怎么区分内网不同的机器的？"></a>网关是怎么区分内网不同的机器的？</h4><p>这个我忘了，记得原来计网课有讲过。。。然后我就瞎扯，什么IP对应啦，端口对应啦。。。我自己都知道肯定是错的。。。<br>后来想想，应该是和子网掩码有关：</p><blockquote><p>子网掩码是一个32位地址，用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在局域网上，还是在远程网上。</p></blockquote><h4 id="smarty主要解决的问题是什么？"><a href="#smarty主要解决的问题是什么？" class="headerlink" title="smarty主要解决的问题是什么？"></a>smarty主要解决的问题是什么？</h4><blockquote><p>数据绑定？<br>可能因为回答得太蠢了，所以面试官直接就不问了。。。</p></blockquote><blockquote><p>它分离了逻辑代码和外在的内容，提供了一种易于管理和使用的方法，用来将原本与HTML代码混杂在一起PHP代码逻辑分离</p></blockquote><h4 id="前端了解过AMD-CMD吗？"><a href="#前端了解过AMD-CMD吗？" class="headerlink" title="前端了解过AMD,CMD吗？"></a>前端了解过AMD,CMD吗？</h4><blockquote><p>模块化策略，另外还有CommonJS</p></blockquote><p>模块化有什么优点？</p><blockquote><p>代码解耦，降低耦合度。 分离功能，便于管理。</p></blockquote><p>自己项目中有用过吗？</p><blockquote><p>只了解过他们的标准，没有实际用过</p></blockquote><p>明知道他们的优点，但是为什么不用到自己的项目中呢？这表明了什么？</p><blockquote><p>额。。。应该就是我比较懒，有一些东西不到必须要用的时候不回去学，比较懒散。我也觉得这样是很不好的，的确得改，应该自己主动去深入学习，掌握，然后应用起来。</p></blockquote><h4 id="自己的博客，或者github"><a href="#自己的博客，或者github" class="headerlink" title="自己的博客，或者github"></a>自己的博客，或者github</h4><blockquote><p>有，博客托管在github上</p></blockquote><p>简历里怎么没写</p><blockquote><p>因为之前博客是在farbox上，后来崩了之后，重新搭的hexo的，内容很少，github里面东西也很少，所以就没有放上去</p></blockquote><p>大概是之前回答的太烂了，后面也暴露了很多缺点，所以面试就这么结束了。<br>整体而言自己觉得很差啦，网络方面的都不会，崩的死死的。<br>不过也说明自己网络方面还需要多多看看呢。还是得加油啊~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;百度一面&quot;&gt;&lt;a href=&quot;#百度一面&quot; class=&quot;headerlink&quot; title=&quot;百度一面&quot;&gt;&lt;/a&gt;百度一面&lt;/h2&gt;&lt;p&gt;目测是挂了，伐开心，不过还是记录一下吧&lt;/p&gt;&lt;h4 id=&quot;image中的alt和title分别是干嘛用的？&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ES6中let的使用</title>
    <link href="http://yoursite.com/2016/09/19/ES6%E4%B8%ADlet%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/09/19/ES6中let的使用/</id>
    <published>2016-09-19T14:41:46.000Z</published>
    <updated>2018-03-19T13:24:18.540Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>ECMAscript 6</code>中，新增了let的变量声明方式，let区别于var，是一个有块作用域的声明方式，以let声明的变量，只在该代码块内具有作用。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>由于var变量会被提升(Hoisting)，导致变量的声明可能在赋值之前。而let声明的变量不会被提升，即在哪里声明就在，不会hoist到上面去。因此很多地方使用let会更加的清晰和简便，比如在for循环中使用：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">10086</span>; i++)&#123;&#125;</span><br></pre></td></tr></table></figure><p>并且，由于不存在变量hoist，变量使用时必须在声明后面，如果在前面就使用，就会抛出<code>ReferenceError</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// Undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><p>这里是先将var a;提升到顶部，于是console.log(a)之前已经有a的声明了，于是执行的时候，a是undefined，而b没有被提升，所以根本没有被声明，而是在后面才被声明，于是会抛出<code>ReferenceError</code>。</p><p>使用let还能够声明一个封闭的块，块内的变量均具有let属性，无法在外部使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">conjunctionJunctionWhatsYour</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//sNotGetCrazy is not visible out here</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span>( sNotGetCrazy = <span class="string">'now'</span> ) &#123;</span><br><span class="line">        <span class="comment">//sNotGetCrazy is only visible in here</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sNotGetCrazy is not visible out here</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>let声明变量时，在该作用域块内，会出现一个“死区”，也即在该作用域内，该变量不再受外部变量的影响，而且在声明该变量之前，也不能对该变量进行任何形式的操作。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// Undefined</span></span><br><span class="line">  tmp = <span class="string">"abc"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(tmp); <span class="comment">// abc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tmp); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>如上，作用块内的使用不会对外部变量发生作用，外部变量也无法影响内部的用let声明的变量。<br>也即let对该作用域块造成了一个死区。<br>同时，也无法在该作用域内对该变量进行第二次声明，否则会抛出<code>TypeError</code>:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> a; <span class="comment">// TypeError</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ES6之前，为了防止一些变量污染全局作用域，通常会使用<code>IIFE(immdiately-invoke-function-expression)</code>，即立即执行函数。这种函数将变量包裹在一个作用域内，以保证执行函数时候使用的变量不会污染全局作用域。一般使用如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;()) <span class="comment">// abc</span></span><br></pre></td></tr></table></figure><p>在ES6内，就无需使用这种函数，只要使用let声明，包裹在一个块作用域内：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="string">"abc"</span>;</span><br><span class="line"><span class="comment">// something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="http://simplyy.space/article/56c2d71f6ba384e02299f9aa" target="_blank" rel="noopener">ES6简版入门（1）</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noopener">MDN - let</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;code&gt;ECMAscript 6&lt;/code&gt;中，新增了let的变量声明方式，let区别于var，是一个有块作用域的声明方式，以let声明的变量，只在该代码块内具有作用。&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
